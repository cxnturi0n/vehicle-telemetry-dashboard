{"version":3,"sources":["../src/APIBase.ts","../src/generated/RootAPI.ts","../src/generated/AuthorizationsAPI.ts","../src/generated/BackupAPI.ts","../src/generated/BucketsAPI.ts","../src/generated/ChecksAPI.ts","../src/generated/ConfigAPI.ts","../src/generated/DashboardsAPI.ts","../src/generated/DbrpsAPI.ts","../src/generated/DebugAPI.ts","../src/generated/DeleteAPI.ts","../src/generated/FlagsAPI.ts","../src/generated/HealthAPI.ts","../src/generated/LabelsAPI.ts","../src/generated/MeAPI.ts","../src/generated/MetricsAPI.ts","../src/generated/NotificationEndpointsAPI.ts","../src/generated/NotificationRulesAPI.ts","../src/generated/OrgsAPI.ts","../src/generated/PingAPI.ts","../src/generated/QueryAPI.ts","../src/generated/ReadyAPI.ts","../src/generated/RemotesAPI.ts","../src/generated/ReplicationsAPI.ts","../src/generated/ResourcesAPI.ts","../src/generated/RestoreAPI.ts","../src/generated/ScrapersAPI.ts","../src/generated/ScriptsAPI.ts","../src/generated/SetupAPI.ts","../src/generated/SigninAPI.ts","../src/generated/SignoutAPI.ts","../src/generated/SourcesAPI.ts","../src/generated/StacksAPI.ts","../src/generated/TasksAPI.ts","../src/generated/TelegrafAPI.ts","../src/generated/TelegrafsAPI.ts","../src/generated/TemplatesAPI.ts","../src/generated/UsersAPI.ts","../src/generated/VariablesAPI.ts","../src/generated/WriteAPI.ts","../src/custom/FluxScriptInvocationAPI.ts"],"sourcesContent":["// this is effectively a clone of\nimport {\n  InfluxDB,\n  Transport,\n  SendOptions,\n  Headers,\n} from '@influxdata/influxdb-client'\n\n// used only in browser builds\ndeclare function btoa(plain: string): string\n\nexport interface RequestOptions {\n  /** HTTP request headers */\n  headers?: {[key: string]: string}\n  /**\n   * Informs about a start of response processing.\n   * @param headers - response HTTP headers\n   * @param statusCode - response status code\n   */\n  responseStarted?: (headers: Headers, statusCode?: number) => void\n}\n\nfunction base64(value: string): string {\n  return typeof btoa === 'function' // browser (window,worker) environment\n    ? btoa(value)\n    : Buffer.from(value, 'binary').toString('base64')\n}\n/**\n * Base class for all apis.\n */\nexport class APIBase {\n  transport: Transport\n  /**\n   * Initializes transport to communicate with InfluxDB.\n   * @param influxDB - the main InfluxDB client object\n   */\n  constructor(influxDB: InfluxDB) {\n    if (!influxDB) throw new Error('No influxDB supplied!')\n    if (!influxDB.transport) throw new Error('No transport supplied!')\n    this.transport = influxDB.transport\n  }\n\n  queryString(request: any, params: string[]): string {\n    if (request && params) {\n      return params.reduce((acc, key) => {\n        const val = request[key]\n        if (val !== undefined && val !== null) {\n          acc += acc ? '&' : '?'\n          acc += encodeURIComponent(key) + '=' + encodeURIComponent(String(val))\n        }\n        return acc\n      }, '')\n    } else {\n      return ''\n    }\n  }\n\n  request(\n    method: string,\n    path: string,\n    request: any = {},\n    requestOptions?: RequestOptions,\n    mediaType?: string\n  ): Promise<any> {\n    const sendOptions: SendOptions = {\n      ...requestOptions,\n      method,\n    }\n    if (mediaType) {\n      ;(sendOptions.headers || (sendOptions.headers = {}))['content-type'] =\n        mediaType\n    }\n    if (request.auth) {\n      const value = `${request.auth.user}:${request.auth.password}`\n      ;(sendOptions.headers || (sendOptions.headers = {}))[\n        'authorization'\n      ] = `Basic ${base64(value)}`\n    }\n    return this.transport.request(\n      path,\n      request.body ? request.body : '',\n      sendOptions,\n      requestOptions?.responseStarted\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Routes} from './types'\n\nexport interface GetRoutesRequest {}\n/**\n * Root API\n */\nexport class RootAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates RootAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all top level routes.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetRoutes }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getRoutes(\n    request?: GetRoutesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Routes> {\n    return this.base.request('GET', `/api/v2/`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Authorization,\n  AuthorizationPostRequest,\n  AuthorizationUpdateRequest,\n  Authorizations,\n} from './types'\n\nexport interface GetAuthorizationsRequest {\n  /** A user ID.\nOnly returns authorizations scoped to this user.\n */\n  userID?: string\n  /** A user name.\nOnly returns authorizations scoped to this user.\n */\n  user?: string\n  /** An organization ID. Only returns authorizations that belong to this organization. */\n  orgID?: string\n  /** An organization name.\nOnly returns authorizations that belong to this organization.\n */\n  org?: string\n}\nexport interface PostAuthorizationsRequest {\n  /** The authorization to create. */\n  body: AuthorizationPostRequest\n}\nexport interface GetAuthorizationsIDRequest {\n  /** The ID of the authorization to get. */\n  authID: string\n}\nexport interface PatchAuthorizationsIDRequest {\n  /** The ID of the authorization to update. */\n  authID: string\n  /** Authorization to update */\n  body: AuthorizationUpdateRequest\n}\nexport interface DeleteAuthorizationsIDRequest {\n  /** The ID of the authorization to delete. */\n  authID: string\n}\n/**\n * Authorizations API\n */\nexport class AuthorizationsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates AuthorizationsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List authorizations.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetAuthorizations }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getAuthorizations(\n    request?: GetAuthorizationsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorizations> {\n    return this.base.request(\n      'GET',\n      `/api/v2/authorizations${this.base.queryString(request, [\n        'userID',\n        'user',\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create an authorization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostAuthorizations }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postAuthorizations(\n    request: PostAuthorizationsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorization> {\n    return this.base.request(\n      'POST',\n      `/api/v2/authorizations`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve an authorization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetAuthorizationsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getAuthorizationsID(\n    request: GetAuthorizationsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorization> {\n    return this.base.request(\n      'GET',\n      `/api/v2/authorizations/${request.authID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update an authorization to be active or inactive.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchAuthorizationsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchAuthorizationsID(\n    request: PatchAuthorizationsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorization> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/authorizations/${request.authID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete an authorization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteAuthorizationsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteAuthorizationsID(\n    request: DeleteAuthorizationsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/authorizations/${request.authID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {MetadataBackup} from './types'\n\nexport interface GetBackupKVRequest {}\nexport interface GetBackupMetadataRequest {}\nexport interface GetBackupShardIdRequest {\n  /** The shard ID. */\n  shardID: number\n  /** The earliest time [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp) to include in the snapshot. */\n  since?: string\n}\n/**\n * Backup API\n */\nexport class BackupAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates BackupAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Download snapshot of metadata stored in the server's embedded KV store. Don't use with InfluxDB versions greater than InfluxDB 2.1.x.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetBackupKV }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBackupKV(\n    request?: GetBackupKVRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/backup/kv`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Download snapshot of all metadata in the server.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetBackupMetadata }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBackupMetadata(\n    request?: GetBackupMetadataRequest,\n    requestOptions?: RequestOptions\n  ): Promise<MetadataBackup> {\n    return this.base.request(\n      'GET',\n      `/api/v2/backup/metadata`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Download snapshot of all TSM data in a shard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetBackupShardId }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBackupShardId(\n    request: GetBackupShardIdRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/backup/shards/${request.shardID}${this.base.queryString(\n        request,\n        ['since']\n      )}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  Bucket,\n  Buckets,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  PatchBucketRequest,\n  PostBucketRequest,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n} from './types'\n\nexport interface GetBucketsRequest {\n  /** The offset for pagination.\nThe number of records to skip.\n */\n  offset?: number\n  /** Limits the number of records returned. Default is `20`.\n   */\n  limit?: number\n  /** Resource ID to seek from. Results are not inclusive of this ID. Use `after` instead of `offset`.\n   */\n  after?: string\n  /** Organization name.\nThe name of the organization.\n\n#### InfluxDB Cloud\n\n - Doesn't use `org` or `orgID`.\n - Creates a bucket in the organization associated with the authorization (API token).\n\n #### InfluxDB OSS\n\n - Accepts either `org` or `orgID`.\n - InfluxDB creates the bucket within this organization.\n */\n  org?: string\n  /** Organization ID.\nThe organization ID.\n\n#### InfluxDB Cloud\n\n - Doesn't use `org` or `orgID`.\n - Creates a bucket in the organization associated with the authorization (API token).\n\n #### InfluxDB OSS\n\n - Accepts either `org` or `orgID`.\n - InfluxDB creates the bucket within this organization.\n */\n  orgID?: string\n  /** Bucket name.\nOnly returns buckets with this specific name.\n */\n  name?: string\n  /** Bucket ID.\nOnly returns the bucket with this ID.\n */\n  id?: string\n}\nexport interface PostBucketsRequest {\n  /** Bucket to create */\n  body: PostBucketRequest\n}\nexport interface GetBucketsIDRequest {\n  /** The ID of the bucket to retrieve.\n   */\n  bucketID: string\n}\nexport interface PatchBucketsIDRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** The bucket update to apply. */\n  body: PatchBucketRequest\n}\nexport interface DeleteBucketsIDRequest {\n  /** Bucket ID.\nThe ID of the bucket to delete.\n */\n  bucketID: string\n}\nexport interface GetBucketsIDLabelsRequest {\n  /** The ID of the bucket to retrieve labels for.\n   */\n  bucketID: string\n}\nexport interface PostBucketsIDLabelsRequest {\n  /** Bucket ID.\nThe ID of the bucket to label.\n */\n  bucketID: string\n  /** An object that contains a _`labelID`_ to add to the bucket. */\n  body: LabelMapping\n}\nexport interface DeleteBucketsIDLabelsIDRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\nexport interface GetBucketsIDMembersRequest {\n  /** The ID of the bucket to retrieve users for.\n   */\n  bucketID: string\n}\nexport interface PostBucketsIDMembersRequest {\n  /** The ID of the bucket to retrieve users for.\n   */\n  bucketID: string\n  /** A user to add as a member to the bucket. */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteBucketsIDMembersIDRequest {\n  /** The ID of the user to remove.\n   */\n  userID: string\n  /** The ID of the bucket to remove a user from.\n   */\n  bucketID: string\n}\nexport interface GetBucketsIDOwnersRequest {\n  /** The bucket ID. */\n  bucketID: string\n}\nexport interface PostBucketsIDOwnersRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteBucketsIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The bucket ID. */\n  bucketID: string\n}\n/**\n * Buckets API\n */\nexport class BucketsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates BucketsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List buckets.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetBuckets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBuckets(\n    request?: GetBucketsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Buckets> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'after',\n        'org',\n        'orgID',\n        'name',\n        'id',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostBuckets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postBuckets(\n    request: PostBucketsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Bucket> {\n    return this.base.request(\n      'POST',\n      `/api/v2/buckets`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetBucketsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBucketsID(\n    request: GetBucketsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Bucket> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets/${request.bucketID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchBucketsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchBucketsID(\n    request: PatchBucketsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Bucket> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/buckets/${request.bucketID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteBucketsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteBucketsID(\n    request: DeleteBucketsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/buckets/${request.bucketID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetBucketsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBucketsIDLabels(\n    request: GetBucketsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets/${request.bucketID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostBucketsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postBucketsIDLabels(\n    request: PostBucketsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/buckets/${request.bucketID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteBucketsIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteBucketsIDLabelsID(\n    request: DeleteBucketsIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/buckets/${request.bucketID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all users with member privileges for a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetBucketsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBucketsIDMembers(\n    request: GetBucketsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets/${request.bucketID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostBucketsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postBucketsIDMembers(\n    request: PostBucketsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/buckets/${request.bucketID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteBucketsIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteBucketsIDMembersID(\n    request: DeleteBucketsIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/buckets/${request.bucketID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetBucketsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBucketsIDOwners(\n    request: GetBucketsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets/${request.bucketID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostBucketsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postBucketsIDOwners(\n    request: PostBucketsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/buckets/${request.bucketID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteBucketsIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteBucketsIDOwnersID(\n    request: DeleteBucketsIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/buckets/${request.bucketID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Check,\n  CheckPatch,\n  Checks,\n  FluxResponse,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  PostCheck,\n} from './types'\n\nexport interface GetChecksRequest {\n  /** The offset for pagination.\nThe number of records to skip.\n */\n  offset?: number\n  /** Limits the number of records returned. Default is `20`.\n   */\n  limit?: number\n  /** Only show checks that belong to a specific organization ID. */\n  orgID: string\n}\nexport interface CreateCheckRequest {\n  /** Check to create */\n  body: PostCheck\n}\nexport interface GetChecksIDRequest {\n  /** The check ID. */\n  checkID: string\n}\nexport interface PutChecksIDRequest {\n  /** The check ID. */\n  checkID: string\n  /** Check update to apply */\n  body: Check\n}\nexport interface PatchChecksIDRequest {\n  /** The check ID. */\n  checkID: string\n  /** Check update to apply */\n  body: CheckPatch\n}\nexport interface DeleteChecksIDRequest {\n  /** The check ID. */\n  checkID: string\n}\nexport interface GetChecksIDLabelsRequest {\n  /** The check ID. */\n  checkID: string\n}\nexport interface PostChecksIDLabelsRequest {\n  /** The check ID. */\n  checkID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteChecksIDLabelsIDRequest {\n  /** The check ID. */\n  checkID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\nexport interface GetChecksIDQueryRequest {\n  /** The check ID. */\n  checkID: string\n}\n/**\n * Checks API\n */\nexport class ChecksAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ChecksAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all checks.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetChecks }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getChecks(\n    request: GetChecksRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Checks> {\n    return this.base.request(\n      'GET',\n      `/api/v2/checks${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'orgID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add new check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/CreateCheck }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  createCheck(\n    request: CreateCheckRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Check> {\n    return this.base.request(\n      'POST',\n      `/api/v2/checks`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetChecksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getChecksID(\n    request: GetChecksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Check> {\n    return this.base.request(\n      'GET',\n      `/api/v2/checks/${request.checkID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PutChecksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putChecksID(\n    request: PutChecksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Check> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/checks/${request.checkID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchChecksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchChecksID(\n    request: PatchChecksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Check> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/checks/${request.checkID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteChecksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteChecksID(\n    request: DeleteChecksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/checks/${request.checkID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetChecksIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getChecksIDLabels(\n    request: GetChecksIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/checks/${request.checkID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostChecksIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postChecksIDLabels(\n    request: PostChecksIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/checks/${request.checkID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete label from a check.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteChecksIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteChecksIDLabelsID(\n    request: DeleteChecksIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/checks/${request.checkID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve a check query.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetChecksIDQuery }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getChecksIDQuery(\n    request: GetChecksIDQueryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<FluxResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/checks/${request.checkID}/query`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Config} from './types'\n\nexport interface GetConfigRequest {}\n/**\n * Config API\n */\nexport class ConfigAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ConfigAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Retrieve runtime configuration.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetConfig }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getConfig(\n    request?: GetConfigRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Config> {\n    return this.base.request('GET', `/api/v2/config`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  Cell,\n  CellUpdate,\n  CellWithViewProperties,\n  Cells,\n  CreateCell,\n  CreateDashboardRequest,\n  Dashboard,\n  DashboardWithViewProperties,\n  Dashboards,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  View,\n} from './types'\n\nexport interface GetDashboardsIDRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** If `properties`, includes the cell view properties in the response. */\n  include?: string\n}\nexport interface PatchDashboardsIDRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** Patching of a dashboard */\n  body: {\n    /** optional, when provided will replace the name */\n    name?: string\n    /** optional, when provided will replace the description */\n    description?: string\n    /** optional, when provided will replace all existing cells with the cells provided */\n    cells?: CellWithViewProperties\n  }\n}\nexport interface DeleteDashboardsIDRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n}\nexport interface PostDashboardsIDCellsRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** Cell that will be added */\n  body: CreateCell\n}\nexport interface PutDashboardsIDCellsRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** entity body */\n  body: Cells\n}\nexport interface PatchDashboardsIDCellsIDRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** The ID of the cell to update. */\n  cellID: string\n  /** entity body */\n  body: CellUpdate\n}\nexport interface DeleteDashboardsIDCellsIDRequest {\n  /** The ID of the dashboard to delete. */\n  dashboardID: string\n  /** The ID of the cell to delete. */\n  cellID: string\n}\nexport interface GetDashboardsIDCellsIDViewRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** The cell ID. */\n  cellID: string\n}\nexport interface PatchDashboardsIDCellsIDViewRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** The ID of the cell to update. */\n  cellID: string\n  /** entity body */\n  body: View\n}\nexport interface GetDashboardsIDLabelsRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface PostDashboardsIDLabelsRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteDashboardsIDLabelsIDRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\nexport interface GetDashboardsIDMembersRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface PostDashboardsIDMembersRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteDashboardsIDMembersIDRequest {\n  /** The ID of the member to remove. */\n  userID: string\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface GetDashboardsIDOwnersRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface PostDashboardsIDOwnersRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteDashboardsIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface GetDashboardsRequest {\n  /** The offset for pagination.\nThe number of records to skip.\n */\n  offset?: number\n  /** Limits the number of records returned. Default is `20`.\n   */\n  limit?: number\n  descending?: any\n  /** A user identifier. Returns only dashboards where this user has the `owner` role. */\n  owner?: string\n  /** The column to sort by. */\n  sortBy?: string\n  /** A list of dashboard identifiers. Returns only the listed dashboards. If both `id` and `owner` are specified, only `id` is used. */\n  id?: any\n  /** The identifier of the organization. */\n  orgID?: string\n  /** The name of the organization. */\n  org?: string\n}\nexport interface PostDashboardsRequest {\n  /** Dashboard to create */\n  body: CreateDashboardRequest\n}\n/**\n * Dashboards API\n */\nexport class DashboardsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates DashboardsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Retrieve a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDashboardsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsID(\n    request: GetDashboardsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboard | DashboardWithViewProperties> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}${this.base.queryString(\n        request,\n        ['include']\n      )}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchDashboardsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchDashboardsID(\n    request: PatchDashboardsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboard> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/dashboards/${request.dashboardID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteDashboardsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsID(\n    request: DeleteDashboardsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a dashboard cell.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostDashboardsIDCells }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboardsIDCells(\n    request: PostDashboardsIDCellsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Cell> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards/${request.dashboardID}/cells`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Replace cells in a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PutDashboardsIDCells }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putDashboardsIDCells(\n    request: PutDashboardsIDCellsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboard> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/dashboards/${request.dashboardID}/cells`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update the non-positional information related to a cell.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchDashboardsIDCellsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchDashboardsIDCellsID(\n    request: PatchDashboardsIDCellsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Cell> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/dashboards/${request.dashboardID}/cells/${request.cellID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a dashboard cell.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteDashboardsIDCellsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsIDCellsID(\n    request: DeleteDashboardsIDCellsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}/cells/${request.cellID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve the view for a cell.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDashboardsIDCellsIDView }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsIDCellsIDView(\n    request: GetDashboardsIDCellsIDViewRequest,\n    requestOptions?: RequestOptions\n  ): Promise<View> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}/cells/${request.cellID}/view`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update the view for a cell.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchDashboardsIDCellsIDView }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchDashboardsIDCellsIDView(\n    request: PatchDashboardsIDCellsIDViewRequest,\n    requestOptions?: RequestOptions\n  ): Promise<View> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/dashboards/${request.dashboardID}/cells/${request.cellID}/view`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * List all labels for a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDashboardsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsIDLabels(\n    request: GetDashboardsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostDashboardsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboardsIDLabels(\n    request: PostDashboardsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards/${request.dashboardID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteDashboardsIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsIDLabelsID(\n    request: DeleteDashboardsIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all dashboard members.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDashboardsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsIDMembers(\n    request: GetDashboardsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostDashboardsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboardsIDMembers(\n    request: PostDashboardsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards/${request.dashboardID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteDashboardsIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsIDMembersID(\n    request: DeleteDashboardsIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all dashboard owners.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDashboardsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsIDOwners(\n    request: GetDashboardsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostDashboardsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboardsIDOwners(\n    request: PostDashboardsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards/${request.dashboardID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteDashboardsIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsIDOwnersID(\n    request: DeleteDashboardsIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all dashboards.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDashboards }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboards(\n    request?: GetDashboardsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboards> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'descending',\n        'owner',\n        'sortBy',\n        'id',\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a dashboard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostDashboards }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboards(\n    request: PostDashboardsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboard | DashboardWithViewProperties> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {DBRP, DBRPCreate, DBRPGet, DBRPUpdate, DBRPs} from './types'\n\nexport interface GetDBRPsRequest {\n  /** Specifies the organization ID to filter on */\n  orgID?: string\n  /** Specifies the organization name to filter on */\n  org?: string\n  /** Specifies the mapping ID to filter on */\n  id?: string\n  /** Specifies the bucket ID to filter on */\n  bucketID?: string\n  /** Specifies filtering on default */\n  default?: any\n  /** Specifies the database to filter on */\n  db?: string\n  /** Specifies the retention policy to filter on */\n  rp?: string\n}\nexport interface PostDBRPRequest {\n  /** The database retention policy mapping to add */\n  body: DBRPCreate\n}\nexport interface GetDBRPsIDRequest {\n  /** The database retention policy mapping ID */\n  dbrpID: string\n  /** Specifies the organization ID of the mapping */\n  orgID?: string\n  /** Specifies the organization name of the mapping */\n  org?: string\n}\nexport interface PatchDBRPIDRequest {\n  /** The database retention policy mapping. */\n  dbrpID: string\n  /** Database retention policy update to apply */\n  body: DBRPUpdate\n  /** Specifies the organization ID of the mapping */\n  orgID?: string\n  /** Specifies the organization name of the mapping */\n  org?: string\n}\nexport interface DeleteDBRPIDRequest {\n  /** The database retention policy mapping */\n  dbrpID: string\n  /** Specifies the organization ID of the mapping */\n  orgID?: string\n  /** Specifies the organization name of the mapping */\n  org?: string\n}\n/**\n * Dbrps API\n */\nexport class DbrpsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates DbrpsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List database retention policy mappings.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDBRPs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDBRPs(\n    request?: GetDBRPsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<DBRPs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dbrps${this.base.queryString(request, [\n        'orgID',\n        'org',\n        'id',\n        'bucketID',\n        'default',\n        'db',\n        'rp',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a database retention policy mapping.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostDBRP }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDBRP(\n    request: PostDBRPRequest,\n    requestOptions?: RequestOptions\n  ): Promise<DBRP> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dbrps`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a database retention policy mapping.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDBRPsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDBRPsID(\n    request: GetDBRPsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<DBRPGet> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dbrps/${request.dbrpID}${this.base.queryString(request, [\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a database retention policy mapping.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchDBRPID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchDBRPID(\n    request: PatchDBRPIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<DBRPGet> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/dbrps/${request.dbrpID}${this.base.queryString(request, [\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a database retention policy.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteDBRPID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDBRPID(\n    request: DeleteDBRPIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dbrps/${request.dbrpID}${this.base.queryString(request, [\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface GetDebugPprofAllProfilesRequest {\n  /** Collects and returns CPU profiling data for the specified [duration](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#duration).\n   */\n  cpu?: string\n}\nexport interface GetDebugPprofAllocsRequest {\n  /** - `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n */\n  debug?: number\n  /** Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n */\n  seconds?: string\n}\nexport interface GetDebugPprofBlockRequest {\n  /** - `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n */\n  debug?: number\n  /** Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n */\n  seconds?: string\n}\nexport interface GetDebugPprofCmdlineRequest {}\nexport interface GetDebugPprofGoroutineRequest {\n  /** - `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as\n       human-readable text with comments that translate addresses to\n       function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n */\n  debug?: number\n  /** Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n */\n  seconds?: string\n}\nexport interface GetDebugPprofHeapRequest {\n  /** - `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n */\n  debug?: number\n  /** Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n */\n  seconds?: string\n  /** - `0`: (Default) don't force garbage collection before sampling.\n- `1`: Force garbage collection before sampling.\n */\n  gc?: number\n}\nexport interface GetDebugPprofMutexRequest {\n  /** - `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n */\n  debug?: number\n  /** Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n */\n  seconds?: string\n}\nexport interface GetDebugPprofProfileRequest {\n  /** Number of seconds to collect profile data. Default is `30` seconds. */\n  seconds?: string\n}\nexport interface GetDebugPprofThreadCreateRequest {\n  /** - `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n */\n  debug?: number\n  /** Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n */\n  seconds?: string\n}\nexport interface GetDebugPprofTraceRequest {\n  /** Number of seconds to collect profile data. */\n  seconds?: string\n}\n/**\n * Debug API\n */\nexport class DebugAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates DebugAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Retrieve all runtime profiles.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDebugPprofAllProfiles }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofAllProfiles(\n    request?: GetDebugPprofAllProfilesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/all${this.base.queryString(request, ['cpu'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve the memory allocations runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDebugPprofAllocs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofAllocs(\n    request?: GetDebugPprofAllocsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/allocs${this.base.queryString(request, [\n        'debug',\n        'seconds',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve the block runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDebugPprofBlock }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofBlock(\n    request?: GetDebugPprofBlockRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/block${this.base.queryString(request, [\n        'debug',\n        'seconds',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve the command line invocation.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDebugPprofCmdline }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofCmdline(\n    request?: GetDebugPprofCmdlineRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/cmdline`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve the goroutines runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDebugPprofGoroutine }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofGoroutine(\n    request?: GetDebugPprofGoroutineRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/goroutine${this.base.queryString(request, [\n        'debug',\n        'seconds',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve the heap runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDebugPprofHeap }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofHeap(\n    request?: GetDebugPprofHeapRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/heap${this.base.queryString(request, [\n        'debug',\n        'seconds',\n        'gc',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve the mutual exclusion (mutex) runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDebugPprofMutex }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofMutex(\n    request?: GetDebugPprofMutexRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/mutex${this.base.queryString(request, [\n        'debug',\n        'seconds',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve the CPU runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDebugPprofProfile }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofProfile(\n    request?: GetDebugPprofProfileRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/profile${this.base.queryString(request, [\n        'seconds',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve the threadcreate runtime profile.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDebugPprofThreadCreate }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofThreadCreate(\n    request?: GetDebugPprofThreadCreateRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/threadcreate${this.base.queryString(request, [\n        'debug',\n        'seconds',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve the runtime execution trace.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetDebugPprofTrace }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDebugPprofTrace(\n    request?: GetDebugPprofTraceRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/debug/pprof/trace${this.base.queryString(request, ['seconds'])}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {DeletePredicateRequest} from './types'\n\nexport interface PostDeleteRequest {\n  /** Time range parameters and an optional **delete predicate expression**.\n\nTo select points to delete within the specified time range, pass a\n**delete predicate expression** in the `predicate` property of the request body.\nIf you don't pass a `predicate`, InfluxDB deletes all data with timestamps\nin the specified time range.\n\n#### Related guides\n\n- [Delete data](https://docs.influxdata.com/influxdb/v2.3/write-data/delete-data/).\n- Learn how to use [delete predicate syntax](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/delete-predicate/).\n */\n  body: DeletePredicateRequest\n  /** The organization to delete data from.\nIf you pass both `orgID` and `org`, they must both be valid.\n\n#### InfluxDB Cloud\n\n- Doesn't require `org` or `orgID`.\n- Deletes data from the bucket in the organization associated with the authorization (API token).\n\n#### InfluxDB OSS\n\n- Requires either `org` or `orgID`.\n */\n  org?: string\n  /** The name or ID of the bucket to delete data from.\nIf you pass both `bucket` and `bucketID`, `bucketID` takes precedence.\n */\n  bucket?: string\n  /** The ID of the organization to delete data from.\nIf you pass both `orgID` and `org`, they must both be valid.\n\n#### InfluxDB Cloud\n\n- Doesn't require `org` or `orgID`.\n- Deletes data from the bucket in the organization associated with the authorization (API token).\n\n#### InfluxDB OSS\n\n- Requires either `org` or `orgID`.\n */\n  orgID?: string\n  /** The ID of the bucket to delete data from.\nIf you pass both `bucket` and `bucketID`, `bucketID` takes precedence.\n */\n  bucketID?: string\n}\n/**\n * Delete API\n */\nexport class DeleteAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates DeleteAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Delete data.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostDelete }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDelete(\n    request: PostDeleteRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/delete${this.base.queryString(request, [\n        'org',\n        'bucket',\n        'orgID',\n        'bucketID',\n      ])}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Flags} from './types'\n\nexport interface GetFlagsRequest {}\n/**\n * Flags API\n */\nexport class FlagsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates FlagsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Return the feature flags for the currently authenticated user.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetFlags }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getFlags(\n    request?: GetFlagsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Flags> {\n    return this.base.request('GET', `/api/v2/flags`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {HealthCheck} from './types'\n\nexport interface GetHealthRequest {}\n/**\n * Health API\n */\nexport class HealthAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates HealthAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Retrieve the health of the instance.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetHealth }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getHealth(\n    request?: GetHealthRequest,\n    requestOptions?: RequestOptions\n  ): Promise<HealthCheck> {\n    return this.base.request('GET', `/health`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  LabelCreateRequest,\n  LabelResponse,\n  LabelUpdate,\n  LabelsResponse,\n} from './types'\n\nexport interface GetLabelsRequest {\n  /** The organization ID. */\n  orgID?: string\n}\nexport interface PostLabelsRequest {\n  /** The label to create. */\n  body: LabelCreateRequest\n}\nexport interface GetLabelsIDRequest {\n  /** The ID of the label to update. */\n  labelID: string\n}\nexport interface PatchLabelsIDRequest {\n  /** The ID of the label to update. */\n  labelID: string\n  /** A label update. */\n  body: LabelUpdate\n}\nexport interface DeleteLabelsIDRequest {\n  /** The ID of the label to delete. */\n  labelID: string\n}\n/**\n * Labels API\n */\nexport class LabelsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates LabelsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all labels.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getLabels(\n    request?: GetLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/labels${this.base.queryString(request, ['orgID'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a label.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postLabels(\n    request: PostLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a label.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getLabelsID(\n    request: GetLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a label.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchLabelsID(\n    request: PatchLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/labels/${request.labelID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteLabelsID(\n    request: DeleteLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {PasswordResetBody, UserResponse} from './types'\n\nexport interface GetMeRequest {}\nexport interface PutMePasswordRequest {\n  auth?: {user: string; password: string}\n  /** The new password. */\n  body: PasswordResetBody\n}\n/**\n * Me API\n */\nexport class MeAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates MeAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Retrieve the currently authenticated user.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetMe }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getMe(\n    request?: GetMeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<UserResponse> {\n    return this.base.request('GET', `/api/v2/me`, request, requestOptions)\n  }\n  /**\n   * Update a password.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PutMePassword }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putMePassword(\n    request: PutMePasswordRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/me/password`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface GetMetricsRequest {}\n/**\n * Metrics API\n */\nexport class MetricsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates MetricsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Retrieve workload performance metrics.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetMetrics }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getMetrics(\n    request?: GetMetricsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request('GET', `/api/v2/metrics`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  NotificationEndpoint,\n  NotificationEndpointUpdate,\n  NotificationEndpoints,\n  PostNotificationEndpoint,\n} from './types'\n\nexport interface GetNotificationEndpointsRequest {\n  /** The offset for pagination.\nThe number of records to skip.\n */\n  offset?: number\n  /** Limits the number of records returned. Default is `20`.\n   */\n  limit?: number\n  /** Only show notification endpoints that belong to specific organization ID. */\n  orgID: string\n}\nexport interface CreateNotificationEndpointRequest {\n  /** Notification endpoint to create */\n  body: PostNotificationEndpoint\n}\nexport interface GetNotificationEndpointsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n}\nexport interface PutNotificationEndpointsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n  /** A new notification endpoint to replace the existing endpoint with */\n  body: NotificationEndpoint\n}\nexport interface PatchNotificationEndpointsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n  /** Check update to apply */\n  body: NotificationEndpointUpdate\n}\nexport interface DeleteNotificationEndpointsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n}\nexport interface GetNotificationEndpointsIDLabelsRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n}\nexport interface PostNotificationEndpointIDLabelsRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteNotificationEndpointsIDLabelsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\n/**\n * NotificationEndpoints API\n */\nexport class NotificationEndpointsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates NotificationEndpointsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all notification endpoints.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetNotificationEndpoints }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationEndpoints(\n    request: GetNotificationEndpointsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoints> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationEndpoints${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'orgID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/CreateNotificationEndpoint }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  createNotificationEndpoint(\n    request: CreateNotificationEndpointRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoint> {\n    return this.base.request(\n      'POST',\n      `/api/v2/notificationEndpoints`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetNotificationEndpointsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationEndpointsID(\n    request: GetNotificationEndpointsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoint> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationEndpoints/${request.endpointID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PutNotificationEndpointsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putNotificationEndpointsID(\n    request: PutNotificationEndpointsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoint> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/notificationEndpoints/${request.endpointID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchNotificationEndpointsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchNotificationEndpointsID(\n    request: PatchNotificationEndpointsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoint> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/notificationEndpoints/${request.endpointID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteNotificationEndpointsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteNotificationEndpointsID(\n    request: DeleteNotificationEndpointsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/notificationEndpoints/${request.endpointID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetNotificationEndpointsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationEndpointsIDLabels(\n    request: GetNotificationEndpointsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationEndpoints/${request.endpointID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostNotificationEndpointIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postNotificationEndpointIDLabels(\n    request: PostNotificationEndpointIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/notificationEndpoints/${request.endpointID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a notification endpoint.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteNotificationEndpointsIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteNotificationEndpointsIDLabelsID(\n    request: DeleteNotificationEndpointsIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/notificationEndpoints/${request.endpointID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  FluxResponse,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  NotificationRule,\n  NotificationRuleUpdate,\n  NotificationRules,\n  PostNotificationRule,\n} from './types'\n\nexport interface GetNotificationRulesRequest {\n  /** The offset for pagination.\nThe number of records to skip.\n */\n  offset?: number\n  /** Limits the number of records returned. Default is `20`.\n   */\n  limit?: number\n  /** Only show notification rules that belong to a specific organization ID. */\n  orgID: string\n  /** Only show notifications that belong to the specific check ID. */\n  checkID?: string\n  /** Only return notification rules that \"would match\" statuses which contain the tag key value pairs provided. */\n  tag?: string\n}\nexport interface CreateNotificationRuleRequest {\n  /** Notification rule to create */\n  body: PostNotificationRule\n}\nexport interface GetNotificationRulesIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n}\nexport interface PutNotificationRulesIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n  /** Notification rule update to apply */\n  body: NotificationRule\n}\nexport interface PatchNotificationRulesIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n  /** Notification rule update to apply */\n  body: NotificationRuleUpdate\n}\nexport interface DeleteNotificationRulesIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n}\nexport interface GetNotificationRulesIDLabelsRequest {\n  /** The notification rule ID. */\n  ruleID: string\n}\nexport interface PostNotificationRuleIDLabelsRequest {\n  /** The notification rule ID. */\n  ruleID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteNotificationRulesIDLabelsIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\nexport interface GetNotificationRulesIDQueryRequest {\n  /** The notification rule ID. */\n  ruleID: string\n}\n/**\n * NotificationRules API\n */\nexport class NotificationRulesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates NotificationRulesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all notification rules.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetNotificationRules }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationRules(\n    request: GetNotificationRulesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRules> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationRules${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'orgID',\n        'checkID',\n        'tag',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/CreateNotificationRule }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  createNotificationRule(\n    request: CreateNotificationRuleRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRule> {\n    return this.base.request(\n      'POST',\n      `/api/v2/notificationRules`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetNotificationRulesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationRulesID(\n    request: GetNotificationRulesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRule> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationRules/${request.ruleID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PutNotificationRulesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putNotificationRulesID(\n    request: PutNotificationRulesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRule> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/notificationRules/${request.ruleID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchNotificationRulesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchNotificationRulesID(\n    request: PatchNotificationRulesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRule> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/notificationRules/${request.ruleID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteNotificationRulesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteNotificationRulesID(\n    request: DeleteNotificationRulesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/notificationRules/${request.ruleID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetNotificationRulesIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationRulesIDLabels(\n    request: GetNotificationRulesIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationRules/${request.ruleID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostNotificationRuleIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postNotificationRuleIDLabels(\n    request: PostNotificationRuleIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/notificationRules/${request.ruleID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete label from a notification rule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteNotificationRulesIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteNotificationRulesIDLabelsID(\n    request: DeleteNotificationRulesIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/notificationRules/${request.ruleID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve a notification rule query.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetNotificationRulesIDQuery }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationRulesIDQuery(\n    request: GetNotificationRulesIDQueryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<FluxResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationRules/${request.ruleID}/query`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  Organization,\n  Organizations,\n  PatchOrganizationRequest,\n  PostOrganizationRequest,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  SecretKeys,\n  SecretKeysResponse,\n  Secrets,\n} from './types'\n\nexport interface GetOrgsRequest {\n  /** The offset for pagination.\nThe number of records to skip.\n */\n  offset?: number\n  /** Limits the number of records returned. Default is `20`.\n   */\n  limit?: number\n  descending?: any\n  /** An organization name.\nOnly returns organizations with this name.\n */\n  org?: string\n  /** An organization ID.\nOnly returns the organization with this ID.\n */\n  orgID?: string\n  /** A user ID.\nOnly returns organizations where this user is a member or owner.\n */\n  userID?: string\n}\nexport interface PostOrgsRequest {\n  /** The organization to create. */\n  body: PostOrganizationRequest\n}\nexport interface GetOrgsIDRequest {\n  /** The ID of the organization to retrieve.\n   */\n  orgID: string\n}\nexport interface PatchOrgsIDRequest {\n  /** The ID of the organization to update.\n   */\n  orgID: string\n  /** The organization update to apply. */\n  body: PatchOrganizationRequest\n}\nexport interface DeleteOrgsIDRequest {\n  /** The ID of the organization to delete.\n   */\n  orgID: string\n}\nexport interface GetOrgsIDSecretsRequest {\n  /** The organization ID. */\n  orgID: string\n}\nexport interface PatchOrgsIDSecretsRequest {\n  /** The organization ID. */\n  orgID: string\n  /** Secret key value pairs to update/add */\n  body: Secrets\n}\nexport interface GetOrgsIDMembersRequest {\n  /** The ID of the organization to retrieve users for.\n   */\n  orgID: string\n}\nexport interface PostOrgsIDMembersRequest {\n  /** The ID of the organization.\n   */\n  orgID: string\n  /** The user to add to the organization.\n   */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteOrgsIDMembersIDRequest {\n  /** The ID of the user to remove. */\n  userID: string\n  /** The ID of the organization to remove a user from. */\n  orgID: string\n}\nexport interface GetOrgsIDOwnersRequest {\n  /** The ID of the organization to list owners for.\n   */\n  orgID: string\n}\nexport interface PostOrgsIDOwnersRequest {\n  /** The ID of the organization that you want to add an owner for. */\n  orgID: string\n  /** The user to add as an owner of the organization. */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteOrgsIDOwnersIDRequest {\n  /** The ID of the user to remove. */\n  userID: string\n  /** The ID of the organization to remove an owner from.\n   */\n  orgID: string\n}\nexport interface PostOrgsIDSecretsRequest {\n  /** The organization ID. */\n  orgID: string\n  /** Secret key to delete */\n  body: SecretKeys\n}\nexport interface DeleteOrgsIDSecretsIDRequest {\n  /** The organization ID. */\n  orgID: string\n  /** The secret ID. */\n  secretID: string\n}\n/**\n * Orgs API\n */\nexport class OrgsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates OrgsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List organizations.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetOrgs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgs(\n    request?: GetOrgsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Organizations> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'descending',\n        'org',\n        'orgID',\n        'userID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostOrgs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postOrgs(\n    request: PostOrgsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Organization> {\n    return this.base.request(\n      'POST',\n      `/api/v2/orgs`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetOrgsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgsID(\n    request: GetOrgsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Organization> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs/${request.orgID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchOrgsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchOrgsID(\n    request: PatchOrgsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Organization> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/orgs/${request.orgID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteOrgsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteOrgsID(\n    request: DeleteOrgsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/orgs/${request.orgID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all secret keys for an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetOrgsIDSecrets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgsIDSecrets(\n    request: GetOrgsIDSecretsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<SecretKeysResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs/${request.orgID}/secrets`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update secrets in an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchOrgsIDSecrets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchOrgsIDSecrets(\n    request: PatchOrgsIDSecretsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/orgs/${request.orgID}/secrets`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * List all members of an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetOrgsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgsIDMembers(\n    request: GetOrgsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs/${request.orgID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostOrgsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postOrgsIDMembers(\n    request: PostOrgsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/orgs/${request.orgID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteOrgsIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteOrgsIDMembersID(\n    request: DeleteOrgsIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/orgs/${request.orgID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetOrgsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgsIDOwners(\n    request: GetOrgsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs/${request.orgID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostOrgsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postOrgsIDOwners(\n    request: PostOrgsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/orgs/${request.orgID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteOrgsIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteOrgsIDOwnersID(\n    request: DeleteOrgsIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/orgs/${request.orgID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Delete secrets from an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostOrgsIDSecrets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postOrgsIDSecrets(\n    request: PostOrgsIDSecretsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/orgs/${request.orgID}/secrets/delete`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a secret from an organization.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteOrgsIDSecretsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteOrgsIDSecretsID(\n    request: DeleteOrgsIDSecretsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/orgs/${request.orgID}/secrets/${request.secretID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface GetPingRequest {}\n/**\n * Ping API\n */\nexport class PingAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates PingAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get the status and version of the instance.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetPing }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getPing(\n    request?: GetPingRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request('GET', `/ping`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  ASTResponse,\n  AnalyzeQueryResponse,\n  FluxSuggestion,\n  FluxSuggestions,\n  LanguageRequest,\n  Query,\n} from './types'\n\nexport interface PostQueryAstRequest {\n  /** The Flux query to analyze. */\n  body: LanguageRequest\n}\nexport interface GetQuerySuggestionsRequest {}\nexport interface GetQuerySuggestionsNameRequest {\n  /** A Flux Function name.\nOnly returns functions with this name.\n */\n  name: string\n}\nexport interface PostQueryAnalyzeRequest {\n  /** Flux query to analyze */\n  body: Query\n}\nexport interface PostQueryRequest {\n  /** Flux query or specification to execute */\n  body: Query\n  /** The name or ID of the organization executing the query.\n\n#### InfluxDB Cloud\n\n- Doesn't use `org` or `orgID`.\n- Queries the bucket in the organization associated with the authorization (API token).\n\n#### InfluxDB OSS\n\n- Requires either `org` or `orgID`.\n */\n  org?: string\n  /** The ID of the organization executing the query.\n\n#### InfluxDB Cloud\n\n- Doesn't use `org` or `orgID`.\n- Queries the bucket in the organization associated with the authorization (API token).\n\n#### InfluxDB OSS\n\n- Requires either `org` or `orgID`.\n */\n  orgID?: string\n}\n/**\n * Query API\n */\nexport class QueryAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates QueryAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Generate a query Abstract Syntax Tree (AST).\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostQueryAst }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postQueryAst(\n    request: PostQueryAstRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ASTResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/query/ast`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve Flux query suggestions.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetQuerySuggestions }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getQuerySuggestions(\n    request?: GetQuerySuggestionsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<FluxSuggestions> {\n    return this.base.request(\n      'GET',\n      `/api/v2/query/suggestions`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve a query suggestion for a branching suggestion.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetQuerySuggestionsName }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getQuerySuggestionsName(\n    request: GetQuerySuggestionsNameRequest,\n    requestOptions?: RequestOptions\n  ): Promise<FluxSuggestion> {\n    return this.base.request(\n      'GET',\n      `/api/v2/query/suggestions/${request.name}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Analyze a Flux query.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostQueryAnalyze }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postQueryAnalyze(\n    request: PostQueryAnalyzeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<AnalyzeQueryResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/query/analyze`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Query data.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostQuery }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postQuery(\n    request: PostQueryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'POST',\n      `/api/v2/query${this.base.queryString(request, ['org', 'orgID'])}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Ready} from './types'\n\nexport interface GetReadyRequest {}\n/**\n * Ready API\n */\nexport class ReadyAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ReadyAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get the readiness of an instance at startup.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetReady }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getReady(\n    request?: GetReadyRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Ready> {\n    return this.base.request('GET', `/ready`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  RemoteConnection,\n  RemoteConnectionCreationRequest,\n  RemoteConnectionUpdateRequest,\n  RemoteConnections,\n} from './types'\n\nexport interface GetRemoteConnectionsRequest {\n  /** The organization ID. */\n  orgID: string\n  name?: string\n  remoteURL?: string\n}\nexport interface PostRemoteConnectionRequest {\n  /** entity body */\n  body: RemoteConnectionCreationRequest\n}\nexport interface GetRemoteConnectionByIDRequest {\n  remoteID: string\n}\nexport interface PatchRemoteConnectionByIDRequest {\n  remoteID: string\n  /** entity body */\n  body: RemoteConnectionUpdateRequest\n}\nexport interface DeleteRemoteConnectionByIDRequest {\n  remoteID: string\n}\n/**\n * Remotes API\n */\nexport class RemotesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates RemotesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all remote connections.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetRemoteConnections }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getRemoteConnections(\n    request: GetRemoteConnectionsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<RemoteConnections> {\n    return this.base.request(\n      'GET',\n      `/api/v2/remotes${this.base.queryString(request, [\n        'orgID',\n        'name',\n        'remoteURL',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Register a new remote connection.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostRemoteConnection }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postRemoteConnection(\n    request: PostRemoteConnectionRequest,\n    requestOptions?: RequestOptions\n  ): Promise<RemoteConnection> {\n    return this.base.request(\n      'POST',\n      `/api/v2/remotes`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a remote connection.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetRemoteConnectionByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getRemoteConnectionByID(\n    request: GetRemoteConnectionByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<RemoteConnection> {\n    return this.base.request(\n      'GET',\n      `/api/v2/remotes/${request.remoteID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a remote connection.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchRemoteConnectionByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchRemoteConnectionByID(\n    request: PatchRemoteConnectionByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<RemoteConnection> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/remotes/${request.remoteID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a remote connection.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteRemoteConnectionByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteRemoteConnectionByID(\n    request: DeleteRemoteConnectionByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/remotes/${request.remoteID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Replication,\n  ReplicationCreationRequest,\n  ReplicationUpdateRequest,\n  Replications,\n} from './types'\n\nexport interface GetReplicationsRequest {\n  /** The organization ID. */\n  orgID: string\n  name?: string\n  remoteID?: string\n  localBucketID?: string\n}\nexport interface PostReplicationRequest {\n  /** entity body */\n  body: ReplicationCreationRequest\n  /** If true, validate the replication, but don't save it. */\n  validate?: any\n}\nexport interface GetReplicationByIDRequest {\n  replicationID: string\n}\nexport interface PatchReplicationByIDRequest {\n  replicationID: string\n  /** entity body */\n  body: ReplicationUpdateRequest\n  /** If true, validate the updated information, but don't save it. */\n  validate?: any\n}\nexport interface DeleteReplicationByIDRequest {\n  replicationID: string\n}\nexport interface PostValidateReplicationByIDRequest {\n  replicationID: string\n}\n/**\n * Replications API\n */\nexport class ReplicationsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ReplicationsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all replications.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetReplications }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getReplications(\n    request: GetReplicationsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Replications> {\n    return this.base.request(\n      'GET',\n      `/api/v2/replications${this.base.queryString(request, [\n        'orgID',\n        'name',\n        'remoteID',\n        'localBucketID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Register a new replication.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostReplication }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postReplication(\n    request: PostReplicationRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Replication> {\n    return this.base.request(\n      'POST',\n      `/api/v2/replications${this.base.queryString(request, ['validate'])}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a replication.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetReplicationByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getReplicationByID(\n    request: GetReplicationByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Replication> {\n    return this.base.request(\n      'GET',\n      `/api/v2/replications/${request.replicationID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a replication.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchReplicationByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchReplicationByID(\n    request: PatchReplicationByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Replication> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/replications/${request.replicationID}${this.base.queryString(\n        request,\n        ['validate']\n      )}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a replication.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteReplicationByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteReplicationByID(\n    request: DeleteReplicationByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/replications/${request.replicationID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Validate a replication.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostValidateReplicationByID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postValidateReplicationByID(\n    request: PostValidateReplicationByIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/replications/${request.replicationID}/validate`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface GetResourcesRequest {}\n/**\n * Resources API\n */\nexport class ResourcesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ResourcesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all known resources.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetResources }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getResources(\n    request?: GetResourcesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string[]> {\n    return this.base.request(\n      'GET',\n      `/api/v2/resources`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {BucketMetadataManifest, RestoredBucketMappings} from './types'\n\nexport interface PostRestoreKVRequest {\n  /** Full KV snapshot. */\n  body: string\n}\nexport interface PostRestoreSQLRequest {\n  /** Full SQL snapshot. */\n  body: string\n}\nexport interface PostRestoreBucketIDRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** Database info serialized as protobuf. */\n  body: string\n}\nexport interface PostRestoreBucketMetadataRequest {\n  /** Metadata manifest for a bucket. */\n  body: BucketMetadataManifest\n}\nexport interface PostRestoreShardIdRequest {\n  /** The shard ID. */\n  shardID: string\n  /** TSM snapshot. */\n  body: string\n}\n/**\n * Restore API\n */\nexport class RestoreAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates RestoreAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Overwrite the embedded KV store on the server with a backed-up snapshot.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostRestoreKV }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postRestoreKV(\n    request: PostRestoreKVRequest,\n    requestOptions?: RequestOptions\n  ): Promise<{\n    /** token is the root token for the instance after restore (this is overwritten during the restore) */\n    token?: string\n  }> {\n    return this.base.request(\n      'POST',\n      `/api/v2/restore/kv`,\n      request,\n      requestOptions,\n      'text/plain'\n    )\n  }\n  /**\n   * Overwrite the embedded SQL store on the server with a backed-up snapshot.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostRestoreSQL }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postRestoreSQL(\n    request: PostRestoreSQLRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/restore/sql`,\n      request,\n      requestOptions,\n      'text/plain'\n    )\n  }\n  /**\n   * Overwrite storage metadata for a bucket with shard info from a backup.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostRestoreBucketID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postRestoreBucketID(\n    request: PostRestoreBucketIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'POST',\n      `/api/v2/restore/bucket/${request.bucketID}`,\n      request,\n      requestOptions,\n      'text/plain'\n    )\n  }\n  /**\n   * Create a new bucket pre-seeded with shard info from a backup.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostRestoreBucketMetadata }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postRestoreBucketMetadata(\n    request: PostRestoreBucketMetadataRequest,\n    requestOptions?: RequestOptions\n  ): Promise<RestoredBucketMappings> {\n    return this.base.request(\n      'POST',\n      `/api/v2/restore/bucketMetadata`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Restore a TSM snapshot into a shard.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostRestoreShardId }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postRestoreShardId(\n    request: PostRestoreShardIdRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/restore/shards/${request.shardID}`,\n      request,\n      requestOptions,\n      'text/plain'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  ScraperTargetRequest,\n  ScraperTargetResponse,\n  ScraperTargetResponses,\n} from './types'\n\nexport interface GetScrapersRequest {\n  /** Specifies the name of the scraper target. */\n  name?: string\n  /** List of scraper target IDs to return. If both `id` and `owner` are specified, only `id` is used. */\n  id?: any\n  /** Specifies the organization ID of the scraper target. */\n  orgID?: string\n  /** Specifies the organization name of the scraper target. */\n  org?: string\n}\nexport interface PostScrapersRequest {\n  /** Scraper target to create */\n  body: ScraperTargetRequest\n}\nexport interface GetScrapersIDRequest {\n  /** The identifier of the scraper target. */\n  scraperTargetID: string\n}\nexport interface PatchScrapersIDRequest {\n  /** The identifier of the scraper target. */\n  scraperTargetID: string\n  /** Scraper target update to apply */\n  body: ScraperTargetRequest\n}\nexport interface DeleteScrapersIDRequest {\n  /** The identifier of the scraper target. */\n  scraperTargetID: string\n}\nexport interface GetScrapersIDLabelsRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface PostScrapersIDLabelsRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteScrapersIDLabelsIDRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n  /** The label ID. */\n  labelID: string\n}\nexport interface GetScrapersIDMembersRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface PostScrapersIDMembersRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteScrapersIDMembersIDRequest {\n  /** The ID of member to remove. */\n  userID: string\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface GetScrapersIDOwnersRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface PostScrapersIDOwnersRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteScrapersIDOwnersIDRequest {\n  /** The ID of owner to remove. */\n  userID: string\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\n/**\n * Scrapers API\n */\nexport class ScrapersAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ScrapersAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all scraper targets.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetScrapers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapers(\n    request?: GetScrapersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScraperTargetResponses> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers${this.base.queryString(request, [\n        'name',\n        'id',\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostScrapers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScrapers(\n    request: PostScrapersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScraperTargetResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scrapers`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetScrapersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapersID(\n    request: GetScrapersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScraperTargetResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers/${request.scraperTargetID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchScrapersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchScrapersID(\n    request: PatchScrapersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScraperTargetResponse> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/scrapers/${request.scraperTargetID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteScrapersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScrapersID(\n    request: DeleteScrapersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scrapers/${request.scraperTargetID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetScrapersIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapersIDLabels(\n    request: GetScrapersIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers/${request.scraperTargetID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostScrapersIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScrapersIDLabels(\n    request: PostScrapersIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scrapers/${request.scraperTargetID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteScrapersIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScrapersIDLabelsID(\n    request: DeleteScrapersIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scrapers/${request.scraperTargetID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all users with member privileges for a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetScrapersIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapersIDMembers(\n    request: GetScrapersIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers/${request.scraperTargetID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostScrapersIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScrapersIDMembers(\n    request: PostScrapersIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scrapers/${request.scraperTargetID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteScrapersIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScrapersIDMembersID(\n    request: DeleteScrapersIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scrapers/${request.scraperTargetID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetScrapersIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapersIDOwners(\n    request: GetScrapersIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers/${request.scraperTargetID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostScrapersIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScrapersIDOwners(\n    request: PostScrapersIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scrapers/${request.scraperTargetID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a scraper target.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteScrapersIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScrapersIDOwnersID(\n    request: DeleteScrapersIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scrapers/${request.scraperTargetID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Script,\n  ScriptCreateRequest,\n  ScriptHTTPResponseData,\n  ScriptInvocationParams,\n  ScriptUpdateRequest,\n  Scripts,\n} from './types'\n\nexport interface GetScriptsRequest {\n  /** The maximum number of scripts to return. Default is `100`.\n   */\n  limit?: number\n  /** The offset for pagination.\nSpecifies the number of records to skip in the result.\n */\n  offset?: number\n  /** The name of the script. */\n  name?: string\n  /** A list of label names.\nOnly returns scripts that have all the specified labels.\nTo retrieve a script, each name you pass in `labelNames` must exactly\nmatch the label for a script.\n */\n  labelNames?: any\n  /** A part of the label name.\nReturns scripts that have a label that contains the specified phrase.\n */\n  labelContains?: string\n}\nexport interface PostScriptsRequest {\n  /** The script to create. */\n  body: ScriptCreateRequest\n}\nexport interface GetScriptsIDRequest {\n  /** A script ID.\nSpecifies the script to retrieve.\n */\n  scriptID: string\n}\nexport interface PatchScriptsIDRequest {\n  /** A script ID.\nSpecifies the script to update.\n */\n  scriptID: string\n  /** The script update to apply. */\n  body: ScriptUpdateRequest\n}\nexport interface DeleteScriptsIDRequest {\n  /** A script ID.\nSpecifies the script to delete.\n */\n  scriptID: string\n}\nexport interface PostScriptsIDInvokeRequest {\n  /** A script ID.\nSpecifies the script to execute.\n */\n  scriptID: string\n  /** entity body */\n  body: ScriptInvocationParams\n}\nexport interface PatchScriptsIDAddLabelsRequest {\n  /** The script ID.\nSpecifies the script to add labels to.\n */\n  scriptID: string\n  /** The labels to add to the script. */\n  body: {\n    /** A list of label names to add. */\n    labels?: string[]\n  }\n}\nexport interface PatchScriptsIDRemoveLabelsRequest {\n  /** A script ID. Specifies the script to remove labels from. */\n  scriptID: string\n  /** The labels to remove from the script. */\n  body: {\n    /** A list of label names to remove. */\n    labels?: string[]\n  }\n}\n/**\n * Scripts API\n */\nexport class ScriptsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ScriptsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List scripts.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/GetScripts }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScripts(\n    request?: GetScriptsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Scripts> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scripts${this.base.queryString(request, [\n        'limit',\n        'offset',\n        'name',\n        'labelNames',\n        'labelContains',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a script.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/PostScripts }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScripts(\n    request: PostScriptsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Script> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scripts`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a script.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/GetScriptsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScriptsID(\n    request: GetScriptsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Script> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scripts/${request.scriptID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a script.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/PatchScriptsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchScriptsID(\n    request: PatchScriptsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Script> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/scripts/${request.scriptID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a script.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/DeleteScriptsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScriptsID(\n    request: DeleteScriptsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scripts/${request.scriptID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Invoke a script.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/PostScriptsIDInvoke }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScriptsIDInvoke(\n    request: PostScriptsIDInvokeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScriptHTTPResponseData> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scripts/${request.scriptID}/invoke`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Add labels to a script.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/PatchScriptsIDAddLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchScriptsIDAddLabels(\n    request: PatchScriptsIDAddLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Script> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/scripts/${request.scriptID}/labels/add`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove labels from a script.\n   * See {@link https://docs.influxdata.com/influxdb/cloud/api/#operation/PatchScriptsIDRemoveLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchScriptsIDRemoveLabels(\n    request: PatchScriptsIDRemoveLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Script> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/scripts/${request.scriptID}/labels/remove`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {IsOnboarding, OnboardingRequest, OnboardingResponse} from './types'\n\nexport interface GetSetupRequest {}\nexport interface PostSetupRequest {\n  /** Source to create */\n  body: OnboardingRequest\n}\n/**\n * Setup API\n */\nexport class SetupAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates SetupAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Check if database has default user, org, bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetSetup }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSetup(\n    request?: GetSetupRequest,\n    requestOptions?: RequestOptions\n  ): Promise<IsOnboarding> {\n    return this.base.request('GET', `/api/v2/setup`, request, requestOptions)\n  }\n  /**\n   * Set up initial user, org and bucket.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostSetup }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postSetup(\n    request: PostSetupRequest,\n    requestOptions?: RequestOptions\n  ): Promise<OnboardingResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/setup`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface PostSigninRequest {\n  auth?: {user: string; password: string}\n}\n/**\n * Signin API\n */\nexport class SigninAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates SigninAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Create a user session.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostSignin }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postSignin(\n    request: PostSigninRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request('POST', `/api/v2/signin`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface PostSignoutRequest {}\n/**\n * Signout API\n */\nexport class SignoutAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates SignoutAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Expire the current UI session.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostSignout }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postSignout(\n    request?: PostSignoutRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request('POST', `/api/v2/signout`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Buckets, HealthCheck, Source, Sources} from './types'\n\nexport interface GetSourcesRequest {\n  /** The name of the organization. */\n  org?: string\n}\nexport interface PostSourcesRequest {\n  /** Source to create */\n  body: Source\n}\nexport interface GetSourcesIDRequest {\n  /** The source ID. */\n  sourceID: string\n}\nexport interface PatchSourcesIDRequest {\n  /** The source ID. */\n  sourceID: string\n  /** Source update */\n  body: Source\n}\nexport interface DeleteSourcesIDRequest {\n  /** The source ID. */\n  sourceID: string\n}\nexport interface GetSourcesIDHealthRequest {\n  /** The source ID. */\n  sourceID: string\n}\nexport interface GetSourcesIDBucketsRequest {\n  /** The source ID. */\n  sourceID: string\n  /** The name of the organization. */\n  org?: string\n}\n/**\n * Sources API\n */\nexport class SourcesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates SourcesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all sources.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetSources }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSources(\n    request?: GetSourcesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Sources> {\n    return this.base.request(\n      'GET',\n      `/api/v2/sources${this.base.queryString(request, ['org'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a source.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostSources }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postSources(\n    request: PostSourcesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Source> {\n    return this.base.request(\n      'POST',\n      `/api/v2/sources`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a source.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetSourcesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSourcesID(\n    request: GetSourcesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Source> {\n    return this.base.request(\n      'GET',\n      `/api/v2/sources/${request.sourceID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a Source.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchSourcesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchSourcesID(\n    request: PatchSourcesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Source> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/sources/${request.sourceID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a source.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteSourcesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteSourcesID(\n    request: DeleteSourcesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/sources/${request.sourceID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get the health of a source.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetSourcesIDHealth }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSourcesIDHealth(\n    request: GetSourcesIDHealthRequest,\n    requestOptions?: RequestOptions\n  ): Promise<HealthCheck> {\n    return this.base.request(\n      'GET',\n      `/api/v2/sources/${request.sourceID}/health`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get buckets in a source.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetSourcesIDBuckets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSourcesIDBuckets(\n    request: GetSourcesIDBucketsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Buckets> {\n    return this.base.request(\n      'GET',\n      `/api/v2/sources/${request.sourceID}/buckets${this.base.queryString(\n        request,\n        ['org']\n      )}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Stack} from './types'\n\nexport interface ListStacksRequest {\n  /** The ID of the organization that owns the stacks.\nOnly returns stacks owned by this organization.\n\n#### InfluxDB Cloud\n\n- Doesn't require this parameter;\n  InfluxDB only returns resources allowed by the API token.\n */\n  orgID: string\n  /** The stack name.\nFinds stack `events` with this name and returns the stacks.\n\nRepeatable.\nTo filter for more than one stack name,\nrepeat this parameter with each name--for example:\n\n- `http://localhost:8086/api/v2/stacks?&orgID=INFLUX_ORG_ID&name=project-stack-0&name=project-stack-1`\n */\n  name?: string\n  /** The stack ID.\nOnly returns stacks with this ID.\n\nRepeatable.\nTo filter for more than one stack ID,\nrepeat this parameter with each ID--for example:\n\n- `http://localhost:8086/api/v2/stacks?&orgID=INFLUX_ORG_ID&stackID=09bd87cd33be3000&stackID=09bef35081fe3000`\n */\n  stackID?: string\n}\nexport interface CreateStackRequest {\n  /** The stack to create. */\n  body: {\n    orgID?: string\n    name?: string\n    description?: string\n    urls?: string[]\n  }\n}\nexport interface ReadStackRequest {\n  /** The identifier of the stack. */\n  stack_id: string\n}\nexport interface UpdateStackRequest {\n  /** The identifier of the stack. */\n  stack_id: string\n  /** The stack to update. */\n  body: {\n    name?: string\n    description?: string\n    templateURLs?: string[]\n    additionalResources?: Array<{\n      resourceID: string\n      kind: string\n      templateMetaName?: string\n    }>\n  }\n}\nexport interface DeleteStackRequest {\n  /** The identifier of the stack. */\n  stack_id: string\n  /** The identifier of the organization. */\n  orgID: string\n}\nexport interface UninstallStackRequest {\n  /** The identifier of the stack. */\n  stack_id: string\n}\n/**\n * Stacks API\n */\nexport class StacksAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates StacksAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List installed stacks.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/ListStacks }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  listStacks(\n    request: ListStacksRequest,\n    requestOptions?: RequestOptions\n  ): Promise<{\n    stacks?: Stack[]\n  }> {\n    return this.base.request(\n      'GET',\n      `/api/v2/stacks${this.base.queryString(request, [\n        'orgID',\n        'name',\n        'stackID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a stack.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/CreateStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  createStack(\n    request: CreateStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Stack> {\n    return this.base.request(\n      'POST',\n      `/api/v2/stacks`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a stack.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/ReadStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  readStack(\n    request: ReadStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Stack> {\n    return this.base.request(\n      'GET',\n      `/api/v2/stacks/${request.stack_id}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a stack.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/UpdateStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  updateStack(\n    request: UpdateStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Stack> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/stacks/${request.stack_id}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a stack and associated resources.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteStack(\n    request: DeleteStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/stacks/${request.stack_id}${this.base.queryString(request, [\n        'orgID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Uninstall a stack.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/UninstallStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  uninstallStack(\n    request: UninstallStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Stack> {\n    return this.base.request(\n      'POST',\n      `/api/v2/stacks/${request.stack_id}/uninstall`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  Logs,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  Run,\n  RunManually,\n  Runs,\n  Task,\n  TaskCreateRequest,\n  TaskUpdateRequest,\n  Tasks,\n} from './types'\n\nexport interface GetTasksIDRunsRequest {\n  /** The ID of the task to get runs for.\nOnly returns runs for this task.\n */\n  taskID: string\n  /** A task run ID. Only returns runs created after this run. */\n  after?: string\n  /** Limits the number of task runs returned. Default is `100`.\n   */\n  limit?: number\n  /** A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp)).\nOnly returns runs scheduled after this time.\n */\n  afterTime?: string\n  /** A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp)).\nOnly returns runs scheduled before this time.\n */\n  beforeTime?: string\n}\nexport interface PostTasksIDRunsRequest {\n  taskID: string\n  /** entity body */\n  body: RunManually\n}\nexport interface GetTasksIDRunsIDRequest {\n  /** The ID of the task to retrieve runs for. */\n  taskID: string\n  /** The ID of the run to retrieve. */\n  runID: string\n}\nexport interface DeleteTasksIDRunsIDRequest {\n  /** The ID of the task to cancel. */\n  taskID: string\n  /** The ID of the task run to cancel. */\n  runID: string\n}\nexport interface PostTasksIDRunsIDRetryRequest {\n  /** A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task)  ID.\nSpecifies the task to retry.\n */\n  taskID: string\n  /** A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task) run ID.\nSpecifies the task run to retry.\n\nTo find a task run ID, use the\n[`GET /api/v2/tasks/{taskID}/runs` endpoint](#operation/GetTasksIDRuns)\nto list task runs.\n */\n  runID: string\n  /** entity body */\n  body: any\n}\nexport interface GetTasksIDLogsRequest {\n  /** The task ID. */\n  taskID: string\n}\nexport interface GetTasksIDRunsIDLogsRequest {\n  /** The ID of the task to get logs for. */\n  taskID: string\n  /** The ID of the run to get logs for. */\n  runID: string\n}\nexport interface GetTasksIDLabelsRequest {\n  /** The ID of the task to retrieve labels for. */\n  taskID: string\n}\nexport interface PostTasksIDLabelsRequest {\n  /** The ID of the task to label. */\n  taskID: string\n  /** An object that contains a _`labelID`_ to add to the task. */\n  body: LabelMapping\n}\nexport interface DeleteTasksIDLabelsIDRequest {\n  /** The ID of the task to delete the label from. */\n  taskID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\nexport interface GetTasksIDMembersRequest {\n  /** The task ID. */\n  taskID: string\n}\nexport interface PostTasksIDMembersRequest {\n  /** The task ID. */\n  taskID: string\n  /** A user to add as a member of the task. */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteTasksIDMembersIDRequest {\n  /** The ID of the member to remove. */\n  userID: string\n  /** The task ID. */\n  taskID: string\n}\nexport interface GetTasksIDOwnersRequest {\n  /** The ID of the task to retrieve owners for. */\n  taskID: string\n}\nexport interface PostTasksIDOwnersRequest {\n  /** The task ID. */\n  taskID: string\n  /** A user to add as an owner of the task. */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteTasksIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The task ID. */\n  taskID: string\n}\nexport interface GetTasksRequest {\n  /** A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task) name.\nOnly returns tasks with the specified name.\nDifferent tasks may have the same name.\n */\n  name?: string\n  /** A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task) ID.\nOnly returns tasks created after the specified task.\n */\n  after?: string\n  /** A [user](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#user) ID.\nOnly returns tasks owned by the specified user.\n */\n  user?: string\n  /** An [organization](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#organization) name.\nOnly returns tasks owned by the specified organization.\n */\n  org?: string\n  /** An [organization](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#organization) ID.\nOnly returns tasks owned by the specified organization.\n */\n  orgID?: string\n  /** A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task) status.\nOnly returns tasks that have the specified status (`active` or `inactive`).\n */\n  status?: string\n  /** The maximum number of [tasks](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task) to return.\nDefault is `100`.\nThe minimum is `1` and the maximum is `500`.\n\nTo reduce the payload size, combine _`type=basic`_ and _`limit`_ (see _Request samples_).\nFor more information about the `basic` response, see the _`type`_ parameter.\n */\n  limit?: number\n  /** A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task) type (`basic` or `system`).\nDefault is `system`.\nSpecifies the level of detail for tasks in the response.\nThe default (`system`) response contains all the metadata properties for tasks.\nTo reduce the response size, pass `basic` to omit some task properties (`flux`, `createdAt`, `updatedAt`).\n */\n  type?: string\n}\nexport interface PostTasksRequest {\n  /** The task to create. */\n  body: TaskCreateRequest\n}\nexport interface GetTasksIDRequest {\n  /** The ID of the task to retrieve. */\n  taskID: string\n}\nexport interface PatchTasksIDRequest {\n  /** The ID of the task to update. */\n  taskID: string\n  /** An object that contains updated task properties to apply. */\n  body: TaskUpdateRequest\n}\nexport interface DeleteTasksIDRequest {\n  /** The ID of the task to delete. */\n  taskID: string\n}\n/**\n * Tasks API\n */\nexport class TasksAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates TasksAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List runs for a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTasksIDRuns }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDRuns(\n    request: GetTasksIDRunsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Runs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/runs${this.base.queryString(request, [\n        'after',\n        'limit',\n        'afterTime',\n        'beforeTime',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Start a task run, overriding the schedule.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostTasksIDRuns }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDRuns(\n    request: PostTasksIDRunsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Run> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/runs`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a run for a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTasksIDRunsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDRunsID(\n    request: GetTasksIDRunsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Run> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/runs/${request.runID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Cancel a running task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteTasksIDRunsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksIDRunsID(\n    request: DeleteTasksIDRunsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}/runs/${request.runID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retry a task run.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostTasksIDRunsIDRetry }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDRunsIDRetry(\n    request: PostTasksIDRunsIDRetryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Run> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/runs/${request.runID}/retry`,\n      request,\n      requestOptions,\n      'application/json; charset=utf-8'\n    )\n  }\n  /**\n   * Retrieve all logs for a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTasksIDLogs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDLogs(\n    request: GetTasksIDLogsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Logs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/logs`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve all logs for a run.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTasksIDRunsIDLogs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDRunsIDLogs(\n    request: GetTasksIDRunsIDLogsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Logs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/runs/${request.runID}/logs`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List labels for a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTasksIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDLabels(\n    request: GetTasksIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostTasksIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDLabels(\n    request: PostTasksIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteTasksIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksIDLabelsID(\n    request: DeleteTasksIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all task members.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTasksIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDMembers(\n    request: GetTasksIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostTasksIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDMembers(\n    request: PostTasksIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteTasksIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksIDMembersID(\n    request: DeleteTasksIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTasksIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDOwners(\n    request: GetTasksIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner for a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostTasksIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDOwners(\n    request: PostTasksIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteTasksIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksIDOwnersID(\n    request: DeleteTasksIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List tasks.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTasks }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasks(\n    request?: GetTasksRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Tasks> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks${this.base.queryString(request, [\n        'name',\n        'after',\n        'user',\n        'org',\n        'orgID',\n        'status',\n        'limit',\n        'type',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostTasks }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasks(\n    request: PostTasksRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Task> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTasksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksID(\n    request: GetTasksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Task> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchTasksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchTasksID(\n    request: PatchTasksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Task> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/tasks/${request.taskID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a task.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteTasksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksID(\n    request: DeleteTasksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {TelegrafPlugins} from './types'\n\nexport interface GetTelegrafPluginsRequest {\n  /** The type of plugin desired. */\n  type?: string\n}\n/**\n * Telegraf API\n */\nexport class TelegrafAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates TelegrafAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all Telegraf plugins.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTelegrafPlugins }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafPlugins(\n    request?: GetTelegrafPluginsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<TelegrafPlugins> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegraf/plugins${this.base.queryString(request, ['type'])}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  Telegraf,\n  TelegrafPluginRequest,\n  Telegrafs,\n} from './types'\n\nexport interface GetTelegrafsRequest {\n  /** The organization ID the Telegraf config belongs to. */\n  orgID?: string\n}\nexport interface PostTelegrafsRequest {\n  /** Telegraf configuration to create */\n  body: TelegrafPluginRequest\n}\nexport interface GetTelegrafsIDRequest {\n  /** The Telegraf configuration ID. */\n  telegrafID: string\n}\nexport interface PutTelegrafsIDRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n  /** Telegraf configuration update to apply */\n  body: TelegrafPluginRequest\n}\nexport interface DeleteTelegrafsIDRequest {\n  /** The Telegraf configuration ID. */\n  telegrafID: string\n}\nexport interface GetTelegrafsIDLabelsRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\nexport interface PostTelegrafsIDLabelsRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteTelegrafsIDLabelsIDRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n  /** The label ID. */\n  labelID: string\n}\nexport interface GetTelegrafsIDMembersRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\nexport interface PostTelegrafsIDMembersRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteTelegrafsIDMembersIDRequest {\n  /** The ID of the member to remove. */\n  userID: string\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\nexport interface GetTelegrafsIDOwnersRequest {\n  /** The Telegraf configuration ID. */\n  telegrafID: string\n}\nexport interface PostTelegrafsIDOwnersRequest {\n  /** The Telegraf configuration ID. */\n  telegrafID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteTelegrafsIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\n/**\n * Telegrafs API\n */\nexport class TelegrafsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates TelegrafsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all Telegraf configurations.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTelegrafs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafs(\n    request?: GetTelegrafsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Telegrafs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs${this.base.queryString(request, ['orgID'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a Telegraf configuration.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostTelegrafs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTelegrafs(\n    request: PostTelegrafsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Telegraf> {\n    return this.base.request(\n      'POST',\n      `/api/v2/telegrafs`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a Telegraf configuration.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTelegrafsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafsID(\n    request: GetTelegrafsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs/${request.telegrafID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a Telegraf configuration.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PutTelegrafsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putTelegrafsID(\n    request: PutTelegrafsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Telegraf> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/telegrafs/${request.telegrafID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a Telegraf configuration.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteTelegrafsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTelegrafsID(\n    request: DeleteTelegrafsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/telegrafs/${request.telegrafID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTelegrafsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafsIDLabels(\n    request: GetTelegrafsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs/${request.telegrafID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostTelegrafsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTelegrafsIDLabels(\n    request: PostTelegrafsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/telegrafs/${request.telegrafID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteTelegrafsIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTelegrafsIDLabelsID(\n    request: DeleteTelegrafsIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/telegrafs/${request.telegrafID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all users with member privileges for a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTelegrafsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafsIDMembers(\n    request: GetTelegrafsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs/${request.telegrafID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostTelegrafsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTelegrafsIDMembers(\n    request: PostTelegrafsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/telegrafs/${request.telegrafID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteTelegrafsIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTelegrafsIDMembersID(\n    request: DeleteTelegrafsIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/telegrafs/${request.telegrafID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of a Telegraf configuration.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetTelegrafsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafsIDOwners(\n    request: GetTelegrafsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs/${request.telegrafID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a Telegraf configuration.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostTelegrafsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTelegrafsIDOwners(\n    request: PostTelegrafsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/telegrafs/${request.telegrafID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a Telegraf config.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteTelegrafsIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTelegrafsIDOwnersID(\n    request: DeleteTelegrafsIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/telegrafs/${request.telegrafID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Template,\n  TemplateApply,\n  TemplateExportByID,\n  TemplateExportByName,\n  TemplateSummary,\n} from './types'\n\nexport interface ApplyTemplateRequest {\n  /** Parameters for applying templates.\n   */\n  body: TemplateApply\n}\nexport interface ExportTemplateRequest {\n  /** Export resources as an InfluxDB template. */\n  body: TemplateExportByID | TemplateExportByName\n}\n/**\n * Templates API\n */\nexport class TemplatesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates TemplatesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Apply or dry-run a template.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/ApplyTemplate }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  applyTemplate(\n    request: ApplyTemplateRequest,\n    requestOptions?: RequestOptions\n  ): Promise<TemplateSummary> {\n    return this.base.request(\n      'POST',\n      `/api/v2/templates/apply`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Export a new template.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/ExportTemplate }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  exportTemplate(\n    request: ExportTemplateRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Template> {\n    return this.base.request(\n      'POST',\n      `/api/v2/templates/export`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {PasswordResetBody, User, UserResponse, Users} from './types'\n\nexport interface PostUsersIDPasswordRequest {\n  /** The user ID. */\n  userID: string\n  auth?: {user: string; password: string}\n  /** New password */\n  body: PasswordResetBody\n}\nexport interface GetUsersRequest {\n  /** The offset for pagination.\nThe number of records to skip.\n */\n  offset?: number\n  /** Limits the number of records returned. Default is `20`.\n   */\n  limit?: number\n  /** Resource ID to seek from. Results are not inclusive of this ID. Use `after` instead of `offset`.\n   */\n  after?: string\n  name?: string\n  id?: string\n}\nexport interface PostUsersRequest {\n  /** The user to create. */\n  body: User\n}\nexport interface GetUsersIDRequest {\n  /** The user ID. */\n  userID: string\n}\nexport interface PatchUsersIDRequest {\n  /** The ID of the user to update. */\n  userID: string\n  /** User update to apply */\n  body: User\n}\nexport interface DeleteUsersIDRequest {\n  /** The ID of the user to delete. */\n  userID: string\n}\n/**\n * Users API\n */\nexport class UsersAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates UsersAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Update a password.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostUsersIDPassword }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postUsersIDPassword(\n    request: PostUsersIDPasswordRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/users/${request.userID}/password`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * List users.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetUsers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getUsers(\n    request?: GetUsersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Users> {\n    return this.base.request(\n      'GET',\n      `/api/v2/users${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'after',\n        'name',\n        'id',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a user.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostUsers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postUsers(\n    request: PostUsersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<UserResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/users`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a user.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetUsersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getUsersID(\n    request: GetUsersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<UserResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/users/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a user.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchUsersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchUsersID(\n    request: PatchUsersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<UserResponse> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/users/${request.userID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a user.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteUsersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteUsersID(\n    request: DeleteUsersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/users/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  Variable,\n  Variables,\n} from './types'\n\nexport interface GetVariablesIDLabelsRequest {\n  /** The variable ID. */\n  variableID: string\n}\nexport interface PostVariablesIDLabelsRequest {\n  /** The variable ID. */\n  variableID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteVariablesIDLabelsIDRequest {\n  /** The variable ID. */\n  variableID: string\n  /** The label ID to delete. */\n  labelID: string\n}\nexport interface GetVariablesRequest {\n  /** The name of the organization. */\n  org?: string\n  /** The organization ID. */\n  orgID?: string\n}\nexport interface PostVariablesRequest {\n  /** Variable to create */\n  body: Variable\n}\nexport interface GetVariablesIDRequest {\n  /** The variable ID. */\n  variableID: string\n}\nexport interface PutVariablesIDRequest {\n  /** The variable ID. */\n  variableID: string\n  /** Variable to replace */\n  body: Variable\n}\nexport interface PatchVariablesIDRequest {\n  /** The variable ID. */\n  variableID: string\n  /** Variable update to apply */\n  body: Variable\n}\nexport interface DeleteVariablesIDRequest {\n  /** The variable ID. */\n  variableID: string\n}\n/**\n * Variables API\n */\nexport class VariablesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates VariablesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all labels for a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetVariablesIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getVariablesIDLabels(\n    request: GetVariablesIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/variables/${request.variableID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostVariablesIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postVariablesIDLabels(\n    request: PostVariablesIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/variables/${request.variableID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteVariablesIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteVariablesIDLabelsID(\n    request: DeleteVariablesIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/variables/${request.variableID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all variables.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetVariables }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getVariables(\n    request?: GetVariablesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variables> {\n    return this.base.request(\n      'GET',\n      `/api/v2/variables${this.base.queryString(request, ['org', 'orgID'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostVariables }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postVariables(\n    request: PostVariablesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variable> {\n    return this.base.request(\n      'POST',\n      `/api/v2/variables`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/GetVariablesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getVariablesID(\n    request: GetVariablesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variable> {\n    return this.base.request(\n      'GET',\n      `/api/v2/variables/${request.variableID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Replace a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PutVariablesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putVariablesID(\n    request: PutVariablesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variable> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/variables/${request.variableID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PatchVariablesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchVariablesID(\n    request: PatchVariablesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variable> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/variables/${request.variableID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a variable.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/DeleteVariablesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteVariablesID(\n    request: DeleteVariablesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/variables/${request.variableID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface PostWriteRequest {\n  /** Data in line protocol format.\n\nTo send compressed data, do the following:\n\n  1. Use [GZIP](https://www.gzip.org/) to compress the line protocol data.\n  2. In your request, send the compressed data and the\n     `Content-Encoding: gzip` header.\n\n#### Related guides\n\n- [Best practices for optimizing writes](https://docs.influxdata.com/influxdb/v2.3/write-data/best-practices/optimize-writes/).\n */\n  body: string\n  /** The destination organization for writes.\nInfluxDB writes all points in the batch to this organization.\nIf you pass both `orgID` and `org`, they must both be valid.\n\n#### InfluxDB Cloud\n\n- Doesn't require `org` or `orgID`.\n- Writes to the bucket in the organization associated with the authorization (API token).\n\n#### InfluxDB OSS\n\n- Requires either `org` or `orgID`.\n- InfluxDB writes all points in the batch to this organization.\n */\n  org: string\n  /** The ID of the destination organization for writes.\nIf you pass both `orgID` and `org`, they must both be valid.\n\n#### InfluxDB Cloud\n\n- Doesn't require `org` or `orgID`.\n- Writes to the bucket in the organization associated with the authorization (API token).\n\n\n#### InfluxDB OSS\n\n- Requires either `org` or `orgID`.\n- InfluxDB writes all points in the batch to this organization.\n */\n  orgID?: string\n  /** The destination bucket for writes.\nInfluxDB writes all points in the batch to this bucket.\n */\n  bucket: string\n  /** The precision for unix timestamps in the line protocol batch. */\n  precision?: any\n}\n/**\n * Write API\n */\nexport class WriteAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates WriteAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Write data.\n   * See {@link https://docs.influxdata.com/influxdb/v2.4/api/#operation/PostWrite }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postWrite(\n    request: PostWriteRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/write${this.base.queryString(request, [\n        'org',\n        'orgID',\n        'bucket',\n        'precision',\n      ])}`,\n      request,\n      requestOptions,\n      'text/plain'\n    )\n  }\n}\n","import {\n  InfluxDB,\n  Transport,\n  AnnotatedCSVResponse,\n} from '@influxdata/influxdb-client'\n\n/** ExecutionOptions contains execution options for a flux script. */\nexport interface ExecutionOptions {\n  /**\n   * Requests gzip encoded response.\n   */\n  gzip?: boolean\n  /**\n   * HTTP headers that will be sent with every query request.\n   */\n  headers?: {[key: string]: string}\n}\n\n/**\n * FluxScriptInvocationAPI executes flux 'API invokable script' and parses the result CSV annotated data.\n * See https://docs.influxdata.com/influxdb/cloud/api-guide/api-invokable-scripts/ .\n */\nexport class FluxScriptInvocationAPI {\n  // internal\n  private transport: Transport\n  private processCSVResponse: InfluxDB['processCSVResponse']\n  private options: ExecutionOptions\n\n  /**\n   * Creates FluxScriptInvocationAPI with the supplied InfluxDB instance and a particular script identifier.\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   * @param options - script execution options\n   */\n  constructor(influxDB: InfluxDB, options?: ExecutionOptions) {\n    this.transport = influxDB.transport\n    this.processCSVResponse = influxDB.processCSVResponse\n    this.options = {...options}\n  }\n\n  /**\n   * Invoke returns a parsed response data stream that executes\n   * the supplied script when asked for data.\n   * @param scriptID - script identifier\n   * @param params  - script parameters\n   * @returns response with various methods to process data from the returned annotated\n   * CSV response data stream\n   */\n  invoke(scriptID: string, params?: Record<string, any>): AnnotatedCSVResponse {\n    const {gzip, headers} = this.options\n    const path = `/api/v2/scripts/${scriptID}/invoke`\n    const body = JSON.stringify({\n      params: {...params},\n    })\n    const options = {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json; encoding=utf-8',\n        'accept-encoding': gzip ? 'gzip' : 'identity',\n        ...headers,\n      },\n    }\n    return this.processCSVResponse(\n      (consumer) => this.transport.send(path, body, options, consumer),\n      () => this.transport.iterate(path, body, options)\n    )\n  }\n}\n"],"mappings":"AAsBA,SAASA,EAAOC,EAAuB,CACrC,OAAO,OAAO,MAAS,WACnB,KAAKA,CAAK,EACV,OAAO,KAAKA,EAAO,QAAQ,EAAE,SAAS,QAAQ,CACpD,CAIO,IAAMC,EAAN,KAAc,CAMnB,YAAYC,EAAoB,CAC9B,GAAI,CAACA,EAAU,MAAM,IAAI,MAAM,uBAAuB,EACtD,GAAI,CAACA,EAAS,UAAW,MAAM,IAAI,MAAM,wBAAwB,EACjE,KAAK,UAAYA,EAAS,SAC5B,CAEA,YAAYC,EAAcC,EAA0B,CAClD,OAAID,GAAWC,EACNA,EAAO,OAAO,CAACC,EAAKC,IAAQ,CACjC,IAAMC,EAAMJ,EAAQG,GACpB,OAAyBC,GAAQ,OAC/BF,GAAOA,EAAM,IAAM,IACnBA,GAAO,mBAAmBC,CAAG,EAAI,IAAM,mBAAmB,OAAOC,CAAG,CAAC,GAEhEF,CACT,EAAG,EAAE,EAEE,EAEX,CAEA,QACEG,EACAC,EACAN,EAAe,CAAC,EAChBO,EACAC,EACc,CACd,IAAMC,EAA2B,CAC/B,GAAGF,EACH,OAAAF,CACF,EAKA,GAJIG,KACAC,EAAY,UAAYA,EAAY,QAAU,CAAC,IAAI,gBACnDD,GAEAR,EAAQ,KAAM,CAChB,IAAMH,EAAQ,GAAGG,EAAQ,KAAK,QAAQA,EAAQ,KAAK,YACjDS,EAAY,UAAYA,EAAY,QAAU,CAAC,IAC/C,cACE,SAASb,EAAOC,CAAK,GAC3B,CACA,OAAO,KAAK,UAAU,QACpBS,EACAN,EAAQ,KAAOA,EAAQ,KAAO,GAC9BS,EACAF,GAAA,YAAAA,EAAgB,eAClB,CACF,CACF,EC7EO,IAAMG,EAAN,KAAc,CAQnB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,UACEE,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QAAQ,MAAO,WAAYD,EAASC,CAAc,CACrE,CACF,ECcO,IAAMC,EAAN,KAAwB,CAQ7B,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,kBACEE,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,MACA,yBAAyB,KAAK,KAAK,YAAYD,EAAS,CACtD,SACA,OACA,QACA,KACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,mBACED,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,OACA,yBACAD,EACAC,EACA,kBACF,CACF,CAQA,oBACED,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,MACA,0BAA0BD,EAAQ,SAClCA,EACAC,CACF,CACF,CAQA,sBACED,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,QACA,0BAA0BD,EAAQ,SAClCA,EACAC,EACA,kBACF,CACF,CAQA,uBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,0BAA0BD,EAAQ,SAClCA,EACAC,CACF,CACF,CACF,EC3IO,IAAMC,EAAN,KAAgB,CAQrB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,YACEE,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,MACA,oBACAD,EACAC,CACF,CACF,CAQA,kBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,MACA,0BACAD,EACAC,CACF,CACF,CAQA,iBACED,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,MACA,yBAAyBD,EAAQ,UAAU,KAAK,KAAK,YACnDA,EACA,CAAC,OAAO,CACV,IACAA,EACAC,CACF,CACF,CACF,EC6DO,IAAMC,EAAN,KAAiB,CAQtB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,WACEE,EACAC,EACkB,CAClB,OAAO,KAAK,KAAK,QACf,MACA,kBAAkB,KAAK,KAAK,YAAYD,EAAS,CAC/C,SACA,QACA,QACA,MACA,QACA,OACA,IACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,YACED,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,OACA,kBACAD,EACAC,EACA,kBACF,CACF,CAQA,aACED,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,MACA,mBAAmBD,EAAQ,WAC3BA,EACAC,CACF,CACF,C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AC,EAC0B,CAC1B,OAAO,KAAK,KAAK,QACf,MACA,sBAAsBD,EAAQ,sBAC9BA,EACAC,CACF,CACF,CAQA,wBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,OACA,sBAAsBD,EAAQ,sBAC9BA,EACAC,EACA,kBACF,CACF,CAQA,4BACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,sBAAsBD,EAAQ,uBAAuBA,EAAQ,SAC7DA,EACAC,CACF,CACF,CAQA,sBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,MACA,sBAAsBD,EAAQ,qBAC9BA,EACAC,CACF,CACF,CAQA,uBACED,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,OACA,sBAAsBD,EAAQ,qBAC9BA,EACAC,EACA,kBACF,CACF,CAQA,2BACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,sBAAsBD,EAAQ,sBAAsBA,EAAQ,SAC5DA,EACAC,CACF,CACF,CAQA,cACED,EACAC,EACqB,CACrB,OAAO,KAAK,KAAK,QACf,MACA,qBAAqB,KAAK,KAAK,YAAYD,EAAS,CAClD,SACA,QACA,aACA,QACA,SACA,KACA,QACA,KACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,eACED,EACAC,EACkD,CAClD,OAAO,KAAK,KAAK,QACf,OACA,qBACAD,EACAC,EACA,kBACF,CACF,CACF,ECpfO,IAAMC,EAAN,KAAe,CAQpB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,SACEE,EACAC,EACgB,CAChB,OAAO,KAAK,KAAK,QACf,MACA,gBAAgB,KAAK,KAAK,YAAYD,EAAS,CAC7C,QACA,MACA,KACA,WACA,UACA,KACA,IACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,SACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,OACA,gBACAD,EACAC,EACA,kBACF,CACF,CAQA,WACED,EACAC,EACkB,CAClB,OAAO,KAAK,KAAK,QACf,MACA,iBAAiBD,EAAQ,SAAS,KAAK,KAAK,YAAYA,EAAS,CAC/D,QACA,KACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,YACED,EACAC,EACkB,CAClB,OAAO,KAAK,KAAK,QACf,QACA,iBAAiBD,EAAQ,SAAS,KAAK,KAAK,YAAYA,EAAS,CAC/D,QACA,KACF,CAAC,IACDA,EACAC,EACA,kBACF,CACF,CAQA,aACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,iBAAiBD,EAAQ,SAAS,KAAK,KAAK,YAAYA,EAAS,CAC/D,QACA,KACF,CAAC,IACDA,EACAC,CACF,CACF,CACF,EChEO,IAAMC,EAAN,KAAe,CAQpB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,yBACEE,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,MACA,0BAA0B,KAAK,KAAK,YAAYD,EAAS,CAAC,KAAK,CAAC,IAChEA,EACAC,CACF,CACF,CAQA,oBACED,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,MACA,6BAA6B,KAAK,KAAK,YAAYD,EAAS,CAC1D,QACA,SACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,mBACED,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,MACA,4BAA4B,KAAK,KAAK,YAAYD,EAAS,CACzD,QACA,SACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,qBACED,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,MACA,8BACAD,EACAC,CACF,CACF,CAQA,uBACED,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,MACA,gCAAgC,KAAK,KAAK,YAAYD,EAAS,CAC7D,QACA,SACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,kBACED,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,MACA,2BAA2B,KAAK,KAAK,YAAYD,EAAS,CACxD,QACA,UACA,IACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,mBACED,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,MACA,4BAA4B,KAAK,KAAK,YA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A,EACAC,EACA,kBACF,CACF,CAQA,6BACED,EACAC,EAC+B,CAC/B,OAAO,KAAK,KAAK,QACf,QACA,iCAAiCD,EAAQ,aACzCA,EACAC,EACA,kBACF,CACF,CAQA,8BACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,iCAAiCD,EAAQ,aACzCA,EACAC,CACF,CACF,CAQA,iCACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,MACA,iCAAiCD,EAAQ,oBACzCA,EACAC,CACF,CACF,CAQA,iCACED,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,OACA,iCAAiCD,EAAQ,oBACzCA,EACAC,EACA,kBACF,CACF,CAQA,sCACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,iCAAiCD,EAAQ,qBAAqBA,EAAQ,UACtEA,EACAC,CACF,CACF,CACF,EC5KO,IAAMC,EAAN,KAA2B,CAQhC,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,qBACEE,EACAC,EAC4B,CAC5B,OAAO,KAAK,KAAK,QACf,MACA,4BAA4B,KAAK,KAAK,YAAYD,EAAS,CACzD,SACA,QACA,QACA,UACA,KACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,uBACED,EACAC,EAC2B,CAC3B,OAAO,KAAK,KAAK,QACf,OACA,4BACAD,EACAC,EACA,kBACF,CACF,CAQA,uBACED,EACAC,EAC2B,CAC3B,OAAO,KAAK,KAAK,QACf,MACA,6BAA6BD,EAAQ,SACrCA,EACAC,CACF,CACF,CAQA,uBACED,EACAC,EAC2B,CAC3B,OAAO,KAAK,KAAK,QACf,MACA,6BAA6BD,EAAQ,SACrCA,EACAC,EACA,kBACF,CACF,CAQA,yBACED,EACAC,EAC2B,CAC3B,OAAO,KAAK,KAAK,QACf,QACA,6BAA6BD,EAAQ,SACrCA,EACAC,EACA,kBACF,CACF,CAQA,0BACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,6BAA6BD,EAAQ,SACrCA,EACAC,CACF,CACF,CAQA,6BACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,MACA,6BAA6BD,EAAQ,gBACrCA,EACAC,CACF,CACF,CAQA,6BACED,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,OACA,6BAA6BD,EAAQ,gBACrCA,EACAC,EACA,kBACF,CACF,CAQA,kCACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,6BAA6BD,EAAQ,iBAAiBA,EAAQ,UAC9DA,EACAC,CACF,CACF,CAQA,4BACED,EACAC,EACuB,CACvB,OAAO,KAAK,KAAK,QACf,MACA,6BAA6BD,EAAQ,eACrCA,EACAC,CACF,CACF,CACF,EC1JO,IAAMC,EAAN,KAAc,CAQnB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,QACEE,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,MACA,eAAe,KAAK,KAAK,YAAYD,EAAS,CAC5C,SACA,QACA,aACA,MACA,QACA,QACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,SACED,EACAC,EACuB,CACvB,OAAO,KAAK,KAAK,QACf,OACA,eACAD,EACAC,EACA,kBACF,CACF,CAQA,UACED,EACAC,EACuB,CACvB,OAAO,KAAK,KAAK,QACf,MACA,gBAAgBD,EAAQ,QACxBA,EACAC,CACF,CACF,CAQA,YACED,EACAC,EACuB,CACvB,OAAO,KAAK,KAAK,QACf,QACA,gBAAgBD,EAAQ,QACxBA,EACAC,EACA,kBACF,CACF,CAQA,aACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,gBAAgBD,EAAQ,QACxBA,EACAC,CACF,CACF,CAQA,iBACED,EACAC,EAC6B,CAC7B,OAAO,KAAK,KAAK,QACf,MACA,gBAAgBD,EAAQ,gBACxBA,EACAC,CACF,CACF,CAQA,mBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,QACA,gBAAgBD,EAAQ,gBACxBA,EACAC,EACA,kBACF,CACF,CAQA,iBACED,EACAC,EAC0B,CAC1B,OAAO,KAAK,KAAK,QACf,MACA,gBAAgBD,EAAQ,gBACxBA,EACAC,CACF,CACF,CAQA,kBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,OACA,gBAAgBD,EAAQ,gBACxBA,EACAC,EACA,kBACF,CACF,CAQA,sBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,gBAAgBD,EAAQ,iBAAiBA,EAAQ,SACjDA,EACAC,CACF,CACF,CAQA,gBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,MACA,gBAAgBD,EAAQ,eACxBA,EACAC,CACF,CACF,CAQA,iBACED,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,OACA,gBAAgBD,EAAQ,eACxBA,EACAC,EACA,kBACF,CACF,CAQA,qBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,gBAAgBD,EAAQ,gBAAgBA,EAAQ,SAChDA,EACAC,CACF,CACF,CAQA,kBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,OACA,gBAAgBD,EAAQ,uBACxBA,EACAC,EACA,kBACF,CACF,CAQA,sBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,gBAAgBD,EAAQ,iBAAiBA,EAAQ,WACjDA,EACAC,CACF,CACF,CACF,ECzZO,IAAMC,EAAN,KAAc,CAQnB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,QACEE,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QAAQ,MAAO,QAASD,EAASC,CAAc,CAClE,CACF,EC0BO,IAAMC,EAAN,KAAe,CAQpB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,aACEE,EACAC,EACsB,CACtB,OAAO,KAAK,KAAK,QACf,OACA,oBACAD,EACAC,EACA,kBACF,CACF,CAQA,oBACED,EACAC,EAC0B,CAC1B,OAAO,KAAK,KAAK,QACf,MACA,4BACAD,EACAC,CACF,CACF,CAQA,wBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,MACA,6BAA6BD,EAAQ,OACrCA,EACAC,CACF,CACF,CAQA,iBACED,EACAC,EAC+B,CAC/B,OAAO,KAAK,KAAK,QACf,OACA,wBACAD,EACAC,EACA,kBACF,CACF,CAQA,UACED,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,OACA,gBAAgB,KAAK,KAAK,YAAYD,EAAS,CAAC,MAAO,OAAO,CAAC,IAC/DA,EACAC,EACA,kBACF,CACF,CACF,ECzJO,IAAMC,EAAN,KAAe,CAQpB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,SACEE,EACAC,EACgB,CAChB,OAAO,KAAK,KAAK,QAAQ,MAAO,SAAUD,EAASC,CAAc,CACnE,CACF,ECCO,IAAMC,EAAN,KAAiB,CAQtB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,qBACEE,EACAC,EAC4B,CAC5B,OAAO,KAAK,KAAK,QACf,MACA,kBAAkB,KAAK,KAAK,YAAYD,EAAS,CAC/C,QACA,OACA,WACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,qBACED,EACAC,EAC2B,CAC3B,OAAO,KAAK,KAAK,QACf,OACA,kBACAD,EACAC,EACA,kBACF,CACF,CAQA,wBACED,EACAC,EAC2B,CAC3B,OAAO,KAAK,KAAK,QACf,MACA,mBAAmBD,EAAQ,WAC3BA,EACAC,CACF,CACF,CAQA,0BACED,EACAC,EAC2B,CAC3B,OAAO,KAAK,KAAK,QACf,QACA,mBAAmBD,EAAQ,WAC3BA,EACAC,EACA,kBACF,CACF,CAQA,2BACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,mBAAmBD,EAAQ,WAC3BA,EACAC,CACF,CACF,CACF,ECnGO,IAAMC,EAAN,KAAsB,CAQ3B,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,gBACEE,EACAC,EACuB,CACvB,OAAO,KAAK,KAAK,QACf,MACA,uBAAuB,KAAK,KAAK,YAAYD,EAAS,CACpD,QACA,OACA,WACA,eACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,gBACED,EACAC,EACsB,CACtB,OAAO,KAAK,KAAK,QACf,OACA,uBAAuB,KAAK,KAAK,YAAYD,EAAS,CAAC,UAAU,CAAC,IAClEA,EACAC,EACA,kBACF,CACF,CAQA,mBACED,EACAC,EACsB,CACtB,OAAO,KAAK,KAAK,QACf,MACA,wBAAwBD,EAAQ,gBAChCA,EACAC,CACF,CACF,CAQA,qBACED,EACAC,EACsB,CACtB,OAAO,KAAK,KAAK,QACf,QACA,wBAAwBD,EAAQ,gBAAgB,KAAK,KAAK,YACxDA,EACA,CAAC,UAAU,CACb,IACAA,EACAC,EACA,kBACF,CACF,CAQA,sBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,wBAAwBD,EAAQ,gBAChCA,EACAC,CACF,CACF,CAQA,4BACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,OACA,wBAAwBD,EAAQ,yBAChCA,EACAC,CACF,CACF,CACF,ECnKO,IAAMC,EAAN,KAAmB,CAQxB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,aACEE,EACAC,EACmB,CACnB,OAAO,KAAK,KAAK,QACf,MACA,oBACAD,EACAC,CACF,CACF,CACF,ECLO,IAAMC,EAAN,KAAiB,CAQtB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,cACEE,EACAC,EAIC,CACD,OAAO,KAAK,KAAK,QACf,OACA,qBACAD,EACAC,EACA,YACF,CACF,CAQA,eACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,OACA,sBACAD,EACAC,EACA,YACF,CACF,CAQA,oBACED,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,OACA,0BAA0BD,EAAQ,WAClCA,EACAC,EACA,YACF,CACF,CAQA,0BACED,EACAC,EACiC,CACjC,OAAO,KAAK,KAAK,QACf,OACA,iCACAD,EACAC,EACA,kBACF,CACF,CAQA,mBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,OACA,0BAA0BD,EAAQ,UAClCA,EACAC,EACA,YACF,CACF,CACF,EC7CO,IAAMC,EAAN,KAAkB,CAQvB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,YACEE,EACAC,EACiC,CACjC,OAAO,KAAK,KAAK,QACf,MACA,mBAAmB,KAAK,KAAK,YAAYD,EAAS,CAChD,OACA,KACA,QACA,KACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,aACED,EACAC,EACgC,CAChC,OAAO,KAAK,KAAK,QACf,OACA,mBACAD,EACAC,EACA,kBACF,CACF,CAQA,cACED,EACAC,EACgC,CAChC,OAAO,KAAK,KAAK,QACf,MACA,oBAAoBD,EAAQ,kBAC5BA,EACAC,CACF,CACF,CAQA,gBACED,EACAC,EACgC,CAChC,OAAO,KAAK,KAAK,QACf,QACA,oBAAoBD,EAAQ,kBAC5BA,EACAC,EACA,kBACF,CACF,CAQA,iBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,oBAAoBD,EAAQ,kBAC5BA,EACAC,CACF,CACF,CAQA,oBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,MACA,oBAAoBD,EAAQ,yBAC5BA,EACAC,CACF,CACF,CAQA,qBACED,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,OACA,oBAAoBD,EAAQ,yBAC5BA,EACAC,EACA,kBACF,CACF,CAQA,yBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,oBAAoBD,EAAQ,0BAA0BA,EAAQ,UAC9DA,EACAC,CACF,CACF,CAQA,qBACED,EACAC,EAC0B,CAC1B,OAAO,KAAK,KAAK,QACf,MACA,oBAAoBD,EAAQ,0BAC5BA,EACAC,CACF,CACF,CAQA,sBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,OACA,oBAAoBD,EAAQ,0BAC5BA,EACAC,EACA,kBACF,CACF,CAQA,0BACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,oBAAoBD,EAAQ,2BAA2BA,EAAQ,SAC/DA,EACAC,CACF,CACF,CAQA,oBACED,EACAC,EACyB,CAC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,QAChDA,EACAC,CACF,CACF,CAQA,oBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,iBAAiBD,EAAQ,eAAeA,EAAQ,QAChDA,EACAC,CACF,CACF,CAQA,uBACED,EACAC,EACc,CACd,OAAO,KAAK,KAAK,QACf,OACA,iBAAiBD,EAAQ,eAAeA,EAAQ,cAChDA,EACAC,EACA,iCACF,CACF,CAQA,eACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,MACA,iBAAiBD,EAAQ,cACzBA,EACAC,CACF,CACF,CAQA,qBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,MACA,iBAAiBD,EAAQ,eAAeA,EAAQ,aAChDA,EACAC,CACF,CACF,CAQA,iBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,MACA,iBAAiBD,EAAQ,gBACzBA,EACAC,CACF,CACF,CAQA,kBACED,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,OACA,iBAAiBD,EAAQ,gBACzBA,EACAC,EACA,kBACF,CACF,CAQA,sBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,iBAAiBD,EAAQ,iBAAiBA,EAAQ,UAClDA,EACAC,CACF,CACF,CAQA,kBACED,EACAC,EAC0B,CAC1B,OAAO,KAAK,KAAK,QACf,MACA,iBAAiBD,EAAQ,iBACzBA,EACAC,CACF,CACF,CAQA,mBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,OACA,iBAAiBD,EAAQ,iBACzBA,EACAC,EACA,kBACF,CACF,CAQA,uBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,iBAAiBD,EAAQ,kBAAkBA,EAAQ,SACnDA,EACAC,CACF,CACF,CAQA,iBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,MACA,iBAAiBD,EAAQ,gBACzBA,EACAC,CACF,CACF,CAQA,kBACED,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,OACA,iBAAiBD,EAAQ,gBACzBA,EACAC,EACA,kBACF,CACF,CAQA,sBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,iBAAiBD,EAAQ,iBAAiBA,EAAQ,SAClDA,EACAC,CACF,CACF,CAQA,SACED,EACAC,EACgB,CAChB,OAAO,KAAK,KAAK,QACf,MACA,gBAAgB,KAAK,KAAK,YAAYD,EAAS,CAC7C,OACA,QACA,OACA,MACA,QACA,SACA,QACA,MACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,UACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,OACA,gBACAD,EACAC,EACA,kBACF,CACF,CAQA,WACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,MACA,iBAAiBD,EAAQ,SACzBA,EACAC,CACF,CACF,CAQA,aACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,QACA,iBAAiBD,EAAQ,SACzBA,EACAC,EACA,kBACF,CACF,CAQA,cACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,iBAAiBD,EAAQ,SACzBA,EACAC,CACF,CACF,CACF,ECjlBO,IAAMC,EAAN,KAAkB,CAQvB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,mBACEE,EACAC,EAC0B,CAC1B,OAAO,KAAK,KAAK,QACf,MACA,2BAA2B,KAAK,KAAK,YAAYD,EAAS,CAAC,MAAM,CAAC,IAClEA,EACAC,CACF,CACF,CACF,ECiDO,IAAMC,EAAN,KAAmB,CAQxB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,aACEE,EACAC,EACoB,CACpB,OAAO,KAAK,KAAK,QACf,MACA,oBAAoB,KAAK,KAAK,YAAYD,EAAS,CAAC,OAAO,CAAC,IAC5DA,EACAC,CACF,CACF,CAQA,cACED,EACAC,EACmB,CACnB,OAAO,KAAK,KAAK,QACf,OACA,oBACAD,EACAC,EACA,kBACF,CACF,CAQA,eACED,EACAC,EACiB,CACjB,OAAO,KAAK,KAAK,QACf,MACA,qBAAqBD,EAAQ,aAC7BA,EACAC,CACF,CACF,CAQA,eACED,EACAC,EACmB,CACnB,OAAO,KAAK,KAAK,QACf,MACA,qBAAqBD,EAAQ,aAC7BA,EACAC,EACA,kBACF,CACF,CAQA,kBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,qBAAqBD,EAAQ,aAC7BA,EACAC,CACF,CACF,CAQA,qBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,MACA,qBAAqBD,EAAQ,oBAC7BA,EACAC,CACF,CACF,CAQA,sBACED,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,OACA,qBAAqBD,EAAQ,oBAC7BA,EACAC,EACA,kBACF,CACF,CAQA,0BACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,qBAAqBD,EAAQ,qBAAqBA,EAAQ,UAC1DA,EACAC,CACF,CACF,CAQA,sBACED,EACAC,EAC0B,CAC1B,OAAO,KAAK,KAAK,QACf,MACA,qBAAqBD,EAAQ,qBAC7BA,EACAC,CACF,CACF,CAQA,uBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,OACA,qBAAqBD,EAAQ,qBAC7BA,EACAC,EACA,kBACF,CACF,CAQA,2BACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,qBAAqBD,EAAQ,sBAAsBA,EAAQ,SAC3DA,EACAC,CACF,CACF,CAQA,qBACED,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,MACA,qBAAqBD,EAAQ,oBAC7BA,EACAC,CACF,CACF,CAQA,sBACED,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,OACA,qBAAqBD,EAAQ,oBAC7BA,EACAC,EACA,kBACF,CACF,CAQA,0BACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,qBAAqBD,EAAQ,qBAAqBA,EAAQ,SAC1DA,EACAC,CACF,CACF,CACF,EC/UO,IAAMC,EAAN,KAAmB,CAQxB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,cACEE,EACAC,EAC0B,CAC1B,OAAO,KAAK,KAAK,QACf,OACA,0BACAD,EACAC,EACA,kBACF,CACF,CAQA,eACED,EACAC,EACmB,CACnB,OAAO,KAAK,KAAK,QACf,OACA,2BACAD,EACAC,EACA,kBACF,CACF,CACF,ECzBO,IAAMC,EAAN,KAAe,CAQpB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,oBACEE,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,OACA,iBAAiBD,EAAQ,kBACzBA,EACAC,EACA,kBACF,CACF,CAQA,SACED,EACAC,EACgB,CAChB,OAAO,KAAK,KAAK,QACf,MACA,gBAAgB,KAAK,KAAK,YAAYD,EAAS,CAC7C,SACA,QACA,QACA,OACA,IACF,CAAC,IACDA,EACAC,CACF,CACF,CAQA,UACED,EACAC,EACuB,CACvB,OAAO,KAAK,KAAK,QACf,OACA,gBACAD,EACAC,EACA,kBACF,CACF,CAQA,WACED,EACAC,EACuB,CACvB,OAAO,KAAK,KAAK,QACf,MACA,iBAAiBD,EAAQ,SACzBA,EACAC,CACF,CACF,CAQA,aACED,EACAC,EACuB,CACvB,OAAO,KAAK,KAAK,QACf,QACA,iBAAiBD,EAAQ,SACzBA,EACAC,EACA,kBACF,CACF,CAQA,cACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,iBAAiBD,EAAQ,SACzBA,EACAC,CACF,CACF,CACF,ECnHO,IAAMC,EAAN,KAAmB,CAQxB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,qBACEE,EACAC,EACyB,CACzB,OAAO,KAAK,KAAK,QACf,MACA,qBAAqBD,EAAQ,oBAC7BA,EACAC,CACF,CACF,CAQA,sBACED,EACAC,EACwB,CACxB,OAAO,KAAK,KAAK,QACf,OACA,qBAAqBD,EAAQ,oBAC7BA,EACAC,EACA,kBACF,CACF,CAQA,0BACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,qBAAqBD,EAAQ,qBAAqBA,EAAQ,UAC1DA,EACAC,CACF,CACF,CAQA,aACED,EACAC,EACoB,CACpB,OAAO,KAAK,KAAK,QACf,MACA,oBAAoB,KAAK,KAAK,YAAYD,EAAS,CAAC,MAAO,OAAO,CAAC,IACnEA,EACAC,CACF,CACF,CAQA,cACED,EACAC,EACmB,CACnB,OAAO,KAAK,KAAK,QACf,OACA,oBACAD,EACAC,EACA,kBACF,CACF,CAQA,eACED,EACAC,EACmB,CACnB,OAAO,KAAK,KAAK,QACf,MACA,qBAAqBD,EAAQ,aAC7BA,EACAC,CACF,CACF,CAQA,eACED,EACAC,EACmB,CACnB,OAAO,KAAK,KAAK,QACf,MACA,qBAAqBD,EAAQ,aAC7BA,EACAC,EACA,kBACF,CACF,CAQA,iBACED,EACAC,EACmB,CACnB,OAAO,KAAK,KAAK,QACf,QACA,qBAAqBD,EAAQ,aAC7BA,EACAC,EACA,kBACF,CACF,CAQA,kBACED,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,SACA,qBAAqBD,EAAQ,aAC7BA,EACAC,CACF,CACF,CACF,ECnLO,IAAMC,EAAN,KAAe,CAQpB,YAAYC,EAAoB,CAC9B,KAAK,KAAO,IAAIC,EAAQD,CAAQ,CAClC,CAQA,UACEE,EACAC,EACe,CACf,OAAO,KAAK,KAAK,QACf,OACA,gBAAgB,KAAK,KAAK,YAAYD,EAAS,CAC7C,MACA,QACA,SACA,WACF,CAAC,IACDA,EACAC,EACA,YACF,CACF,CACF,ECtEO,IAAMC,EAAN,KAA8B,CAWnC,YAAYC,EAAoBC,EAA4B,CAC1D,KAAK,UAAYD,EAAS,UAC1B,KAAK,mBAAqBA,EAAS,mBACnC,KAAK,QAAU,CAAC,GAAGC,CAAO,CAC5B,CAUA,OAAOC,EAAkBC,EAAoD,CAC3E,GAAM,CAAC,KAAAC,EAAM,QAAAC,CAAO,EAAI,KAAK,QACvBC,EAAO,mBAAmBJ,WAC1BK,EAAO,KAAK,UAAU,CAC1B,OAAQ,CAAC,GAAGJ,CAAM,CACpB,CAAC,EACKF,EAAU,CACd,OAAQ,OACR,QAAS,CACP,eAAgB,mCAChB,kBAAmBG,EAAO,OAAS,WACnC,GAAGC,CACL,CACF,EACA,OAAO,KAAK,mBACTG,GAAa,KAAK,UAAU,KAAKF,EAAMC,EAAMN,EAASO,CAAQ,EAC/D,IAAM,KAAK,UAAU,QAAQF,EAAMC,EAAMN,CAAO,CAClD,CACF,CACF","names":["base64","value","APIBase","influxDB","request","params","acc","key","val","method","path","requestOptions","mediaType","sendOptions","RootAPI","influxDB","APIBase","request","requestOptions","AuthorizationsAPI","influxDB","APIBase","request","requestOptions","BackupAPI","influxDB","APIBase","request","requestOptions","BucketsAPI","influxDB","APIBase","request","requestOptions","ChecksAPI","influxDB","APIBase","request","requestOptions","ConfigAPI","influxDB","APIBase","request","requestOptions","DashboardsAPI","influxDB","APIBase","request","requestOptions","DbrpsAPI","influxDB","APIBase","request","requestOptions","DebugAPI","influxDB","APIBase","request","requestOptions","DeleteAPI","influxDB","APIBase","request","requestOptions","FlagsAPI","influxDB","APIBase","request","requestOptions","HealthAPI","influxDB","APIBase","request","requestOptions","LabelsAPI","influxDB","APIBase","request","requestOptions","MeAPI","influxDB","APIBase","request","requestOptions","MetricsAPI","influxDB","APIBase","request","requestOptions","NotificationEndpointsAPI","influxDB","APIBase","request","requestOptions","NotificationRulesAPI","influxDB","APIBase","request","requestOptions","OrgsAPI","influxDB","APIBase","request","requestOptions","PingAPI","influxDB","APIBase","request","requestOptions","QueryAPI","influxDB","APIBase","request","requestOptions","ReadyAPI","influxDB","APIBase","request","requestOptions","RemotesAPI","influxDB","APIBase","request","requestOptions","ReplicationsAPI","influxDB","APIBase","request","requestOptions","ResourcesAPI","influxDB","APIBase","request","requestOptions","RestoreAPI","influxDB","APIBase","request","requestOptions","ScrapersAPI","influxDB","APIBase","request","requestOptions","ScriptsAPI","influxDB","APIBase","request","requestOptions","SetupAPI","influxDB","APIBase","request","requestOptions","SigninAPI","influxDB","APIBase","request","requestOptions","SignoutAPI","influxDB","APIBase","request","requestOptions","SourcesAPI","influxDB","APIBase","request","requestOptions","StacksAPI","influxDB","APIBase","request","requestOptions","TasksAPI","influxDB","APIBase","request","requestOptions","TelegrafAPI","influxDB","APIBase","request","requestOptions","TelegrafsAPI","influxDB","APIBase","request","requestOptions","TemplatesAPI","influxDB","APIBase","request","requestOptions","UsersAPI","influxDB","APIBase","request","requestOptions","VariablesAPI","influxDB","APIBase","request","requestOptions","WriteAPI","influxDB","APIBase","request","requestOptions","FluxScriptInvocationAPI","influxDB","options","scriptID","params","gzip","headers","path","body","consumer"]}